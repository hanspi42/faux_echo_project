-- -------------------------------------------------------------
-- 
-- File Name: E:\Users\Donut\Dokumente\FHNW\7. Semester\pro7E\Matlab\2021a\hdl_coder\Der_Faux_FPGA_ovs150_WL46\Z22_circuit.vhd
-- Created: 2020-12-24 12:43:09
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Z22_circuit
-- Source Path: Der_Faux_FPGA_ovs150_WL46/Der_Faux_FPGA/Z22_circuit
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Der_Faux_FPGA_pkg.ALL;

ENTITY Z22_circuit IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Gvar1_N                           :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        Z22_in                            :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En50
        Z22_out                           :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En41
        );
END Z22_circuit;


ARCHITECTURE rtl OF Z22_circuit IS

  -- Constants
  CONSTANT LUT_Z22a_data                  : vector_of_signed21(0 TO 31) := 
    (to_signed(16#0B19C2#, 21), to_signed(16#0B1B0F#, 21), to_signed(16#0B1B7D#, 21), to_signed(16#0B1BB4#, 21),
     to_signed(16#0B1BD4#, 21), to_signed(16#0B1BEA#, 21), to_signed(16#0B1BF9#, 21), to_signed(16#0B1C04#, 21),
     to_signed(16#0B1C0C#, 21), to_signed(16#0B1C12#, 21), to_signed(16#0B1C17#, 21), to_signed(16#0B1C1A#, 21),
     to_signed(16#0B1C1D#, 21), to_signed(16#0B1C1F#, 21), to_signed(16#0B1C20#, 21), to_signed(16#0B1C21#, 21),
     to_signed(16#0B1C21#, 21), to_signed(16#0B1C20#, 21), to_signed(16#0B1C1F#, 21), to_signed(16#0B1C1D#, 21),
     to_signed(16#0B1C1A#, 21), to_signed(16#0B1C17#, 21), to_signed(16#0B1C12#, 21), to_signed(16#0B1C0C#, 21),
     to_signed(16#0B1C04#, 21), to_signed(16#0B1BF9#, 21), to_signed(16#0B1BEA#, 21), to_signed(16#0B1BD4#, 21),
     to_signed(16#0B1BB4#, 21), to_signed(16#0B1B7D#, 21), to_signed(16#0B1B0F#, 21), to_signed(16#0B19C2#, 21));  -- sfix21 [32]
  CONSTANT LUT_Z22b_data                  : vector_of_signed20(0 TO 31) := 
    (to_signed(-16#7FC22#, 20), to_signed(-16#7FE01#, 20), to_signed(-16#7FEA0#, 20), to_signed(-16#7FEEF#, 20),
     to_signed(-16#7FF1D#, 20), to_signed(-16#7FF3C#, 20), to_signed(-16#7FF52#, 20), to_signed(-16#7FF61#, 20),
     to_signed(-16#7FF6D#, 20), to_signed(-16#7FF76#, 20), to_signed(-16#7FF7D#, 20), to_signed(-16#7FF82#, 20),
     to_signed(-16#7FF86#, 20), to_signed(-16#7FF89#, 20), to_signed(-16#7FF8B#, 20), to_signed(-16#7FF8B#, 20),
     to_signed(-16#7FF8B#, 20), to_signed(-16#7FF8B#, 20), to_signed(-16#7FF89#, 20), to_signed(-16#7FF86#, 20),
     to_signed(-16#7FF82#, 20), to_signed(-16#7FF7D#, 20), to_signed(-16#7FF76#, 20), to_signed(-16#7FF6D#, 20),
     to_signed(-16#7FF61#, 20), to_signed(-16#7FF52#, 20), to_signed(-16#7FF3C#, 20), to_signed(-16#7FF1D#, 20),
     to_signed(-16#7FEEF#, 20), to_signed(-16#7FEA0#, 20), to_signed(-16#7FE01#, 20), to_signed(-16#7FC22#, 20));  -- sfix20 [32]

  -- Signals
  SIGNAL Gvar1_N_unsigned                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL LUT_Z22a_k                       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL LUT_Z22a_out1                    : signed(20 DOWNTO 0);  -- sfix21_En20
  SIGNAL Mult_delay2_out1                 : signed(20 DOWNTO 0);  -- sfix21_En20
  SIGNAL Z22_in_signed                    : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL Product6_mul_temp                : signed(66 DOWNTO 0);  -- sfix67_En70
  SIGNAL Product6_out1                    : signed(45 DOWNTO 0);  -- sfix46_En51
  SIGNAL LUT_Z22b_k                       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL LUT_Z22b_out1                    : signed(19 DOWNTO 0);  -- sfix20_En19
  SIGNAL Mult_delay1_out1                 : signed(19 DOWNTO 0);  -- sfix20_En19
  SIGNAL Delay_Mod10_out1                 : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL Product7_mul_temp                : signed(66 DOWNTO 0);  -- sfix67_En70
  SIGNAL Product7_out1                    : signed(45 DOWNTO 0);  -- sfix46_En51
  SIGNAL Sum4_out1                        : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Delay_Mod11_out1                 : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Product8_mul_temp                : signed(65 DOWNTO 0);  -- sfix66_En60
  SIGNAL Product8_out1                    : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Sum4_stage2_sub_cast             : signed(56 DOWNTO 0);  -- sfix57_En51
  SIGNAL Sum4_stage2_sub_cast_1           : signed(56 DOWNTO 0);  -- sfix57_En51
  SIGNAL Sum4_op_stage1                   : signed(56 DOWNTO 0);  -- sfix57_En51
  SIGNAL Sum4_stage3_add_cast             : signed(57 DOWNTO 0);  -- sfix58_En51
  SIGNAL Sum4_stage3_add_cast_1           : signed(56 DOWNTO 0);  -- sfix57_En51
  SIGNAL Sum4_stage3_add_cast_2           : signed(57 DOWNTO 0);  -- sfix58_En51
  SIGNAL Sum4_stage3_add_temp             : signed(57 DOWNTO 0);  -- sfix58_En51
  SIGNAL Sum4_stage3_cast                 : signed(56 DOWNTO 0);  -- sfix57_En51

BEGIN
  Gvar1_N_unsigned <= unsigned(Gvar1_N);

  
  LUT_Z22a_k <= to_unsigned(16#00#, 5) WHEN Gvar1_N_unsigned = to_unsigned(16#00#, 5) ELSE
      to_unsigned(16#1F#, 5) WHEN Gvar1_N_unsigned = to_unsigned(16#1F#, 5) ELSE
      Gvar1_N_unsigned;
  LUT_Z22a_out1 <= LUT_Z22a_data(to_integer(LUT_Z22a_k));

  Mult_delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Mult_delay2_out1 <= to_signed(16#000000#, 21);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Mult_delay2_out1 <= LUT_Z22a_out1;
      END IF;
    END IF;
  END PROCESS Mult_delay2_process;


  Z22_in_signed <= signed(Z22_in);

  Product6_mul_temp <= Mult_delay2_out1 * Z22_in_signed;
  
  Product6_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Product6_mul_temp(66) = '0') AND (Product6_mul_temp(65 DOWNTO 64) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Product6_mul_temp(66) = '1') AND (Product6_mul_temp(65 DOWNTO 64) /= "11") ELSE
      Product6_mul_temp(64 DOWNTO 19);

  
  LUT_Z22b_k <= to_unsigned(16#00#, 5) WHEN Gvar1_N_unsigned = to_unsigned(16#00#, 5) ELSE
      to_unsigned(16#1F#, 5) WHEN Gvar1_N_unsigned = to_unsigned(16#1F#, 5) ELSE
      Gvar1_N_unsigned;
  LUT_Z22b_out1 <= LUT_Z22b_data(to_integer(LUT_Z22b_k));

  Mult_delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Mult_delay1_out1 <= to_signed(16#00000#, 20);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Mult_delay1_out1 <= LUT_Z22b_out1;
      END IF;
    END IF;
  END PROCESS Mult_delay1_process;


  Delay_Mod10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay_Mod10_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay_Mod10_out1 <= Z22_in_signed;
      END IF;
    END IF;
  END PROCESS Delay_Mod10_process;


  Product7_mul_temp <= Delay_Mod10_out1 * Mult_delay2_out1;
  
  Product7_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Product7_mul_temp(66) = '0') AND (Product7_mul_temp(65 DOWNTO 64) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Product7_mul_temp(66) = '1') AND (Product7_mul_temp(65 DOWNTO 64) /= "11") ELSE
      Product7_mul_temp(64 DOWNTO 19);

  Delay_Mod11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay_Mod11_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay_Mod11_out1 <= Sum4_out1;
      END IF;
    END IF;
  END PROCESS Delay_Mod11_process;


  Product8_mul_temp <= Mult_delay1_out1 * Delay_Mod11_out1;
  
  Product8_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Product8_mul_temp(65) = '0') AND (Product8_mul_temp(64) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Product8_mul_temp(65) = '1') AND (Product8_mul_temp(64) /= '1') ELSE
      Product8_mul_temp(64 DOWNTO 19);

  Sum4_stage2_sub_cast <= resize(Product6_out1, 57);
  Sum4_stage2_sub_cast_1 <= resize(Product8_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 57);
  Sum4_op_stage1 <= Sum4_stage2_sub_cast - Sum4_stage2_sub_cast_1;

  Sum4_stage3_add_cast <= resize(Sum4_op_stage1, 58);
  Sum4_stage3_add_cast_1 <= resize(Product7_out1, 57);
  Sum4_stage3_add_cast_2 <= resize(Sum4_stage3_add_cast_1, 58);
  Sum4_stage3_add_temp <= Sum4_stage3_add_cast + Sum4_stage3_add_cast_2;
  
  Sum4_stage3_cast <= "011111111111111111111111111111111111111111111111111111111" WHEN (Sum4_stage3_add_temp(57) = '0') AND (Sum4_stage3_add_temp(56) /= '0') ELSE
      "100000000000000000000000000000000000000000000000000000000" WHEN (Sum4_stage3_add_temp(57) = '1') AND (Sum4_stage3_add_temp(56) /= '1') ELSE
      Sum4_stage3_add_temp(56 DOWNTO 0);
  
  Sum4_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Sum4_stage3_cast(56) = '0') AND (Sum4_stage3_cast(55) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum4_stage3_cast(56) = '1') AND (Sum4_stage3_cast(55) /= '1') ELSE
      Sum4_stage3_cast(55 DOWNTO 10);

  Z22_out <= std_logic_vector(Sum4_out1);

END rtl;

