-- -------------------------------------------------------------
-- 
-- File Name: E:\Users\Donut\Dokumente\FHNW\7. Semester\pro7E\Matlab\2021a\hdl_coder\Der_Faux_FPGA_ovs150_WL46\Der_Faux_FPGA.vhd
-- Created: 2020-12-24 12:43:10
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.38889e-07
-- Target subsystem base rate: 1.38889e-07
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Vout                          ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Der_Faux_FPGA
-- Source Path: Der_Faux_FPGA_ovs150_WL46/Der_Faux_FPGA
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Der_Faux_FPGA_pkg.ALL;

ENTITY Der_Faux_FPGA IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Vin                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        Gvar1_N                           :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        Gvar2_N                           :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        Gvar3_N                           :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        Gvar4_N                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out                            :   OUT   std_logic;
        Vout                              :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
        );
END Der_Faux_FPGA;


ARCHITECTURE rtl OF Der_Faux_FPGA IS

  -- Component Declarations
  COMPONENT Der_Faux_FPGA_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_150_0                     :   OUT   std_logic;
          enb_1_150_1                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Difference3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En42
          Y                               :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En46
          );
  END COMPONENT;

  COMPONENT Difference5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En41
          Y                               :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En51
          );
  END COMPONENT;

  COMPONENT Difference6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En41
          Y                               :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En52
          );
  END COMPONENT;

  COMPONENT Comparator_Logic
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in_noninverted                  :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En41
          in_inverted                     :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En41
          clk_div                         :   IN    std_logic;
          out_mod                         :   OUT   std_logic_vector(45 DOWNTO 0);  -- sfix46_En53
          out_dem                         :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En53
          );
  END COMPONENT;

  COMPONENT Difference7
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En41
          Y                               :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En51
          );
  END COMPONENT;

  COMPONENT Difference9
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En41
          Y                               :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En52
          );
  END COMPONENT;

  COMPONENT Difference8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En41
          Y                               :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En52
          );
  END COMPONENT;

  COMPONENT Difference11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En41
          Y                               :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En50
          );
  END COMPONENT;

  COMPONENT Difference4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En41
          Y                               :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En50
          );
  END COMPONENT;

  COMPONENT Difference10
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En41
          Y                               :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En50
          );
  END COMPONENT;

  COMPONENT Z22_circuit
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Gvar1_N                         :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          Z22_in                          :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En50
          Z22_out                         :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En41
          );
  END COMPONENT;

  COMPONENT Z25_circuit
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Gvar2_N                         :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          Z25_in                          :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En49
          Z25_out                         :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En41
          );
  END COMPONENT;

  COMPONENT Z23_circuit
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Gvar1_N                         :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          Gvar2_N                         :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          Gvar3_N                         :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          Data_in                         :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En49
          Out1                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En41
          );
  END COMPONENT;

  COMPONENT Difference12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En41
          Y                               :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En52
          );
  END COMPONENT;

  COMPONENT Z24_circuit
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Gvar3_N                         :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          Z24_in                          :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En49
          Z24_out                         :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En41
          );
  END COMPONENT;

  COMPONENT Difference13
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En41
          Y                               :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En52
          );
  END COMPONENT;

  COMPONENT Difference1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En41
          Y                               :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En47
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Der_Faux_FPGA_tc
    USE ENTITY work.Der_Faux_FPGA_tc(rtl);

  FOR ALL : Difference3
    USE ENTITY work.Difference3(rtl);

  FOR ALL : Difference5
    USE ENTITY work.Difference5(rtl);

  FOR ALL : Difference6
    USE ENTITY work.Difference6(rtl);

  FOR ALL : Comparator_Logic
    USE ENTITY work.Comparator_Logic(rtl);

  FOR ALL : Difference7
    USE ENTITY work.Difference7(rtl);

  FOR ALL : Difference9
    USE ENTITY work.Difference9(rtl);

  FOR ALL : Difference8
    USE ENTITY work.Difference8(rtl);

  FOR ALL : Difference11
    USE ENTITY work.Difference11(rtl);

  FOR ALL : Difference4
    USE ENTITY work.Difference4(rtl);

  FOR ALL : Difference10
    USE ENTITY work.Difference10(rtl);

  FOR ALL : Z22_circuit
    USE ENTITY work.Z22_circuit(rtl);

  FOR ALL : Z25_circuit
    USE ENTITY work.Z25_circuit(rtl);

  FOR ALL : Z23_circuit
    USE ENTITY work.Z23_circuit(rtl);

  FOR ALL : Difference12
    USE ENTITY work.Difference12(rtl);

  FOR ALL : Z24_circuit
    USE ENTITY work.Z24_circuit(rtl);

  FOR ALL : Difference13
    USE ENTITY work.Difference13(rtl);

  FOR ALL : Difference1
    USE ENTITY work.Difference1(rtl);

  -- Constants
  CONSTANT LUT_Gvar3_data                 : vector_of_signed22(0 TO 31) := 
    (to_signed(16#15A07B#, 22), to_signed(16#0AD03E#, 22), to_signed(16#07357E#, 22), to_signed(16#05681F#, 22),
     to_signed(16#04534C#, 22), to_signed(16#039ABF#, 22), to_signed(16#0316ED#, 22), to_signed(16#02B40F#, 22),
     to_signed(16#02672A#, 22), to_signed(16#0229A6#, 22), to_signed(16#01F751#, 22), to_signed(16#01CD60#, 22),
     to_signed(16#01A9E2#, 22), to_signed(16#018B77#, 22), to_signed(16#017119#, 22), to_signed(16#015A08#, 22),
     to_signed(16#0145AD#, 22), to_signed(16#013395#, 22), to_signed(16#012365#, 22), to_signed(16#0114D3#, 22),
     to_signed(16#0107A4#, 22), to_signed(16#00FBA9#, 22), to_signed(16#00F0B7#, 22), to_signed(16#00E6B0#, 22),
     to_signed(16#00DD76#, 22), to_signed(16#00D4F1#, 22), to_signed(16#00CD0E#, 22), to_signed(16#00C5BB#, 22),
     to_signed(16#00BEEA#, 22), to_signed(16#00B88D#, 22), to_signed(16#00B299#, 22), to_signed(16#00AD04#, 22));  -- sfix22 [32]
  CONSTANT LUT_Gvar2_rev_data             : vector_of_signed22(0 TO 31) := 
    (to_signed(16#00D845#, 22), to_signed(16#00DF3F#, 22), to_signed(16#00E6B0#, 22), to_signed(16#00EEA4#, 22),
     to_signed(16#00F72A#, 22), to_signed(16#010052#, 22), to_signed(16#010A2D#, 22), to_signed(16#0114D3#, 22),
     to_signed(16#01205C#, 22), to_signed(16#012CE5#, 22), to_signed(16#013A93#, 22), to_signed(16#01498D#, 22),
     to_signed(16#015A08#, 22), to_signed(16#016C3E#, 22), to_signed(16#01807A#, 22), to_signed(16#019718#, 22),
     to_signed(16#01B08A#, 22), to_signed(16#01CD60#, 22), to_signed(16#01EE54#, 22), to_signed(16#02145B#, 22),
     to_signed(16#0240B8#, 22), to_signed(16#027525#, 22), to_signed(16#02B40F#, 22), to_signed(16#0300F5#, 22),
     to_signed(16#036113#, 22), to_signed(16#03DCA8#, 22), to_signed(16#04816F#, 22), to_signed(16#05681F#, 22),
     to_signed(16#06C227#, 22), to_signed(16#0902DE#, 22), to_signed(16#0D844D#, 22), to_signed(16#1B089A#, 22));  -- sfix22 [32]
  CONSTANT LUT_Gvar1_data                 : vector_of_signed22(0 TO 31) := 
    (to_signed(16#15A07B#, 22), to_signed(16#0AD03E#, 22), to_signed(16#07357E#, 22), to_signed(16#05681F#, 22),
     to_signed(16#04534C#, 22), to_signed(16#039ABF#, 22), to_signed(16#0316ED#, 22), to_signed(16#02B40F#, 22),
     to_signed(16#02672A#, 22), to_signed(16#0229A6#, 22), to_signed(16#01F751#, 22), to_signed(16#01CD60#, 22),
     to_signed(16#01A9E2#, 22), to_signed(16#018B77#, 22), to_signed(16#017119#, 22), to_signed(16#015A08#, 22),
     to_signed(16#0145AD#, 22), to_signed(16#013395#, 22), to_signed(16#012365#, 22), to_signed(16#0114D3#, 22),
     to_signed(16#0107A4#, 22), to_signed(16#00FBA9#, 22), to_signed(16#00F0B7#, 22), to_signed(16#00E6B0#, 22),
     to_signed(16#00DD76#, 22), to_signed(16#00D4F1#, 22), to_signed(16#00CD0E#, 22), to_signed(16#00C5BB#, 22),
     to_signed(16#00BEEA#, 22), to_signed(16#00B88D#, 22), to_signed(16#00B299#, 22), to_signed(16#00AD04#, 22));  -- sfix22 [32]
  CONSTANT alpha1_D_Lookup_Table1_data    : vector_of_unsigned5(0 TO 255) := 
    (to_unsigned(16#01#, 5), to_unsigned(16#01#, 5), to_unsigned(16#01#, 5), to_unsigned(16#01#, 5),
     to_unsigned(16#01#, 5), to_unsigned(16#01#, 5), to_unsigned(16#01#, 5), to_unsigned(16#01#, 5),
     to_unsigned(16#01#, 5), to_unsigned(16#01#, 5), to_unsigned(16#01#, 5), to_unsigned(16#01#, 5),
     to_unsigned(16#01#, 5), to_unsigned(16#01#, 5), to_unsigned(16#02#, 5), to_unsigned(16#02#, 5),
     to_unsigned(16#02#, 5), to_unsigned(16#02#, 5), to_unsigned(16#02#, 5), to_unsigned(16#02#, 5),
     to_unsigned(16#02#, 5), to_unsigned(16#02#, 5), to_unsigned(16#02#, 5), to_unsigned(16#02#, 5),
     to_unsigned(16#02#, 5), to_unsigned(16#03#, 5), to_unsigned(16#03#, 5), to_unsigned(16#03#, 5),
     to_unsigned(16#03#, 5), to_unsigned(16#03#, 5), to_unsigned(16#03#, 5), to_unsigned(16#03#, 5),
     to_unsigned(16#03#, 5), to_unsigned(16#03#, 5), to_unsigned(16#03#, 5), to_unsigned(16#03#, 5),
     to_unsigned(16#04#, 5), to_unsigned(16#04#, 5), to_unsigned(16#04#, 5), to_unsigned(16#04#, 5),
     to_unsigned(16#04#, 5), to_unsigned(16#04#, 5), to_unsigned(16#04#, 5), to_unsigned(16#04#, 5),
     to_unsigned(16#04#, 5), to_unsigned(16#04#, 5), to_unsigned(16#04#, 5), to_unsigned(16#05#, 5),
     to_unsigned(16#05#, 5), to_unsigned(16#05#, 5), to_unsigned(16#05#, 5), to_unsigned(16#05#, 5),
     to_unsigned(16#05#, 5), to_unsigned(16#05#, 5), to_unsigned(16#05#, 5), to_unsigned(16#05#, 5),
     to_unsigned(16#05#, 5), to_unsigned(16#05#, 5), to_unsigned(16#06#, 5), to_unsigned(16#06#, 5),
     to_unsigned(16#06#, 5), to_unsigned(16#06#, 5), to_unsigned(16#06#, 5), to_unsigned(16#06#, 5),
     to_unsigned(16#06#, 5), to_unsigned(16#06#, 5), to_unsigned(16#06#, 5), to_unsigned(16#06#, 5),
     to_unsigned(16#06#, 5), to_unsigned(16#07#, 5), to_unsigned(16#07#, 5), to_unsigned(16#07#, 5),
     to_unsigned(16#07#, 5), to_unsigned(16#07#, 5), to_unsigned(16#07#, 5), to_unsigned(16#07#, 5),
     to_unsigned(16#07#, 5), to_unsigned(16#07#, 5), to_unsigned(16#07#, 5), to_unsigned(16#07#, 5),
     to_unsigned(16#08#, 5), to_unsigned(16#08#, 5), to_unsigned(16#08#, 5), to_unsigned(16#08#, 5),
     to_unsigned(16#08#, 5), to_unsigned(16#08#, 5), to_unsigned(16#08#, 5), to_unsigned(16#08#, 5),
     to_unsigned(16#08#, 5), to_unsigned(16#08#, 5), to_unsigned(16#08#, 5), to_unsigned(16#09#, 5),
     to_unsigned(16#09#, 5), to_unsigned(16#09#, 5), to_unsigned(16#09#, 5), to_unsigned(16#09#, 5),
     to_unsigned(16#09#, 5), to_unsigned(16#09#, 5), to_unsigned(16#09#, 5), to_unsigned(16#09#, 5),
     to_unsigned(16#09#, 5), to_unsigned(16#0A#, 5), to_unsigned(16#0A#, 5), to_unsigned(16#0A#, 5),
     to_unsigned(16#0A#, 5), to_unsigned(16#0A#, 5), to_unsigned(16#0A#, 5), to_unsigned(16#0A#, 5),
     to_unsigned(16#0A#, 5), to_unsigned(16#0A#, 5), to_unsigned(16#0A#, 5), to_unsigned(16#0A#, 5),
     to_unsigned(16#0B#, 5), to_unsigned(16#0B#, 5), to_unsigned(16#0B#, 5), to_unsigned(16#0B#, 5),
     to_unsigned(16#0B#, 5), to_unsigned(16#0B#, 5), to_unsigned(16#0B#, 5), to_unsigned(16#0B#, 5),
     to_unsigned(16#0B#, 5), to_unsigned(16#0B#, 5), to_unsigned(16#0B#, 5), to_unsigned(16#0C#, 5),
     to_unsigned(16#0C#, 5), to_unsigned(16#0C#, 5), to_unsigned(16#0C#, 5), to_unsigned(16#0C#, 5),
     to_unsigned(16#0C#, 5), to_unsigned(16#0C#, 5), to_unsigned(16#0C#, 5), to_unsigned(16#0C#, 5),
     to_unsigned(16#0C#, 5), to_unsigned(16#0C#, 5), to_unsigned(16#0D#, 5), to_unsigned(16#0D#, 5),
     to_unsigned(16#0D#, 5), to_unsigned(16#0D#, 5), to_unsigned(16#0D#, 5), to_unsigned(16#0D#, 5),
     to_unsigned(16#0D#, 5), to_unsigned(16#0D#, 5), to_unsigned(16#0D#, 5), to_unsigned(16#0D#, 5),
     to_unsigned(16#0D#, 5), to_unsigned(16#0E#, 5), to_unsigned(16#0E#, 5), to_unsigned(16#0E#, 5),
     to_unsigned(16#0E#, 5), to_unsigned(16#0E#, 5), to_unsigned(16#0E#, 5), to_unsigned(16#0E#, 5),
     to_unsigned(16#0E#, 5), to_unsigned(16#0E#, 5), to_unsigned(16#0E#, 5), to_unsigned(16#0E#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#10#, 5),
     to_unsigned(16#10#, 5), to_unsigned(16#10#, 5), to_unsigned(16#10#, 5), to_unsigned(16#10#, 5),
     to_unsigned(16#10#, 5), to_unsigned(16#10#, 5), to_unsigned(16#10#, 5), to_unsigned(16#10#, 5),
     to_unsigned(16#10#, 5), to_unsigned(16#10#, 5), to_unsigned(16#11#, 5), to_unsigned(16#11#, 5),
     to_unsigned(16#11#, 5), to_unsigned(16#11#, 5), to_unsigned(16#11#, 5), to_unsigned(16#11#, 5),
     to_unsigned(16#11#, 5), to_unsigned(16#11#, 5), to_unsigned(16#11#, 5), to_unsigned(16#11#, 5),
     to_unsigned(16#12#, 5), to_unsigned(16#12#, 5), to_unsigned(16#12#, 5), to_unsigned(16#12#, 5),
     to_unsigned(16#12#, 5), to_unsigned(16#12#, 5), to_unsigned(16#12#, 5), to_unsigned(16#12#, 5),
     to_unsigned(16#12#, 5), to_unsigned(16#12#, 5), to_unsigned(16#12#, 5), to_unsigned(16#13#, 5),
     to_unsigned(16#13#, 5), to_unsigned(16#13#, 5), to_unsigned(16#13#, 5), to_unsigned(16#13#, 5),
     to_unsigned(16#13#, 5), to_unsigned(16#13#, 5), to_unsigned(16#13#, 5), to_unsigned(16#13#, 5),
     to_unsigned(16#13#, 5), to_unsigned(16#13#, 5), to_unsigned(16#14#, 5), to_unsigned(16#14#, 5),
     to_unsigned(16#14#, 5), to_unsigned(16#14#, 5), to_unsigned(16#14#, 5), to_unsigned(16#14#, 5),
     to_unsigned(16#14#, 5), to_unsigned(16#14#, 5), to_unsigned(16#14#, 5), to_unsigned(16#14#, 5),
     to_unsigned(16#14#, 5), to_unsigned(16#15#, 5), to_unsigned(16#15#, 5), to_unsigned(16#15#, 5),
     to_unsigned(16#15#, 5), to_unsigned(16#15#, 5), to_unsigned(16#15#, 5), to_unsigned(16#15#, 5),
     to_unsigned(16#15#, 5), to_unsigned(16#15#, 5), to_unsigned(16#15#, 5), to_unsigned(16#15#, 5),
     to_unsigned(16#16#, 5), to_unsigned(16#16#, 5), to_unsigned(16#16#, 5), to_unsigned(16#16#, 5),
     to_unsigned(16#16#, 5), to_unsigned(16#16#, 5), to_unsigned(16#16#, 5), to_unsigned(16#16#, 5),
     to_unsigned(16#16#, 5), to_unsigned(16#16#, 5), to_unsigned(16#16#, 5), to_unsigned(16#17#, 5),
     to_unsigned(16#17#, 5), to_unsigned(16#17#, 5), to_unsigned(16#17#, 5), to_unsigned(16#17#, 5),
     to_unsigned(16#17#, 5), to_unsigned(16#17#, 5), to_unsigned(16#17#, 5), to_unsigned(16#17#, 5),
     to_unsigned(16#17#, 5), to_unsigned(16#17#, 5), to_unsigned(16#18#, 5), to_unsigned(16#18#, 5));  -- ufix5 [256]

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_150_0                      : std_logic;
  SIGNAL enb_1_150_1                      : std_logic;
  SIGNAL Vin_signed                       : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Data_Type_Conversion_out1        : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL Rate_Transition_out1             : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL Path_Delay_0_out1                : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL s_input_acc_cast                 : signed(45 DOWNTO 0);  -- sfix46_En13
  SIGNAL s_state_out2                     : signed(45 DOWNTO 0);  -- sfix46_En15
  SIGNAL s_state_out3_1                   : signed(45 DOWNTO 0);  -- sfix46_En15
  SIGNAL denom_gain3_mul_temp             : signed(64 DOWNTO 0);  -- sfix65_En31
  SIGNAL s_denom_gain3                    : signed(45 DOWNTO 0);  -- sfix46_En13
  SIGNAL s_state_out1                     : signed(45 DOWNTO 0);  -- sfix46_En15
  SIGNAL denom_gain2_mul_temp             : signed(64 DOWNTO 0);  -- sfix65_En31
  SIGNAL s_denom_gain2                    : signed(45 DOWNTO 0);  -- sfix46_En13
  SIGNAL s_state_cast                     : signed(45 DOWNTO 0);  -- sfix46_En15
  SIGNAL denom_gain1_mul_temp             : signed(64 DOWNTO 0);  -- sfix65_En31
  SIGNAL s_denom_gain1                    : signed(45 DOWNTO 0);  -- sfix46_En13
  SIGNAL denom_acc1_sub_cast              : signed(46 DOWNTO 0);  -- sfix47_En13
  SIGNAL denom_acc1_sub_cast_1            : signed(46 DOWNTO 0);  -- sfix47_En13
  SIGNAL denom_acc1_sub_temp              : signed(46 DOWNTO 0);  -- sfix47_En13
  SIGNAL s_denom_acc_out1                 : signed(45 DOWNTO 0);  -- sfix46_En13
  SIGNAL denom_acc2_sub_cast              : signed(46 DOWNTO 0);  -- sfix47_En13
  SIGNAL denom_acc2_sub_cast_1            : signed(46 DOWNTO 0);  -- sfix47_En13
  SIGNAL denom_acc2_sub_temp              : signed(46 DOWNTO 0);  -- sfix47_En13
  SIGNAL s_denom_acc_out2                 : signed(45 DOWNTO 0);  -- sfix46_En13
  SIGNAL denom_acc3_sub_cast              : signed(46 DOWNTO 0);  -- sfix47_En13
  SIGNAL denom_acc3_sub_cast_1            : signed(46 DOWNTO 0);  -- sfix47_En13
  SIGNAL denom_acc3_sub_temp              : signed(46 DOWNTO 0);  -- sfix47_En13
  SIGNAL s_denom_acc_out3                 : signed(45 DOWNTO 0);  -- sfix46_En13
  SIGNAL nume_gain_b0_mul_temp            : signed(61 DOWNTO 0);  -- sfix62_En38
  SIGNAL s_nume_gain_b0                   : signed(45 DOWNTO 0);  -- sfix46_En23
  SIGNAL s_nume_gain_b0_cast              : signed(45 DOWNTO 0);  -- sfix46_En22
  SIGNAL nume_gain1_mul_temp              : signed(61 DOWNTO 0);  -- sfix62_En38
  SIGNAL s_nume_gain1                     : signed(45 DOWNTO 0);  -- sfix46_En23
  SIGNAL s_nume_acc_cast1                 : signed(45 DOWNTO 0);  -- sfix46_En22
  SIGNAL s_nume_acc1_add_cast             : signed(46 DOWNTO 0);  -- sfix47_En22
  SIGNAL s_nume_acc1_add_cast_1           : signed(46 DOWNTO 0);  -- sfix47_En22
  SIGNAL s_nume_acc1_add_temp             : signed(46 DOWNTO 0);  -- sfix47_En22
  SIGNAL s_nume_acc_out1                  : signed(45 DOWNTO 0);  -- sfix46_En22
  SIGNAL nume_gain2_mul_temp              : signed(61 DOWNTO 0);  -- sfix62_En38
  SIGNAL s_nume_gain2                     : signed(45 DOWNTO 0);  -- sfix46_En23
  SIGNAL s_nume_acc_cast2                 : signed(45 DOWNTO 0);  -- sfix46_En22
  SIGNAL s_nume_acc2_add_cast             : signed(46 DOWNTO 0);  -- sfix47_En22
  SIGNAL s_nume_acc2_add_cast_1           : signed(46 DOWNTO 0);  -- sfix47_En22
  SIGNAL s_nume_acc2_add_temp             : signed(46 DOWNTO 0);  -- sfix47_En22
  SIGNAL s_nume_acc_out2                  : signed(45 DOWNTO 0);  -- sfix46_En22
  SIGNAL nume_gain3_mul_temp              : signed(61 DOWNTO 0);  -- sfix62_En38
  SIGNAL s_nume_gain3                     : signed(45 DOWNTO 0);  -- sfix46_En23
  SIGNAL s_nume_acc_cast3                 : signed(45 DOWNTO 0);  -- sfix46_En22
  SIGNAL s_nume_acc3_add_cast             : signed(46 DOWNTO 0);  -- sfix47_En22
  SIGNAL s_nume_acc3_add_cast_1           : signed(46 DOWNTO 0);  -- sfix47_En22
  SIGNAL s_nume_acc3_add_temp             : signed(46 DOWNTO 0);  -- sfix47_En22
  SIGNAL s_nume_acc_out3                  : signed(45 DOWNTO 0);  -- sfix46_En22
  SIGNAL s_output_cast                    : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Path_Delay_1_out1                : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Gain5_mul_temp                   : signed(91 DOWNTO 0);  -- sfix92_En101
  SIGNAL Gain5_factor                     : signed(91 DOWNTO 0);  -- sfix92
  SIGNAL Gain5_factor_1                   : signed(91 DOWNTO 0);  -- sfix92
  SIGNAL Gain5_factor_2                   : signed(91 DOWNTO 0);  -- sfix92
  SIGNAL I4                               : signed(45 DOWNTO 0);  -- sfix46_En56
  SIGNAL Gvar3_N_unsigned                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL alpha3                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL LUT_Gvar3_k                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL LUT_Gvar3_out1                   : signed(21 DOWNTO 0);  -- sfix22_En31
  SIGNAL Mult_delay1_out1                 : signed(21 DOWNTO 0);  -- sfix22_En31
  SIGNAL Gvar1_N_unsigned                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL alpha1                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Gvar2_N_unsigned                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL alpha2                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL LUT_Gvar2_rev_k                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL LUT_Gvar2_rev_out1               : signed(21 DOWNTO 0);  -- sfix22_En29
  SIGNAL Mult_delay2_out1                 : signed(21 DOWNTO 0);  -- sfix22_En29
  SIGNAL LUT_Gvar1_k                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL LUT_Gvar1_out1                   : signed(21 DOWNTO 0);  -- sfix22_En30
  SIGNAL Mult_delay3_out1                 : signed(21 DOWNTO 0);  -- sfix22_En30
  SIGNAL Difference3_out1                 : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Difference3_out1_signed          : signed(45 DOWNTO 0);  -- sfix46_En46
  SIGNAL Gain13_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En88
  SIGNAL Gain13_factor                    : signed(91 DOWNTO 0);  -- sfix92
  SIGNAL I1                               : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL Gvar4_N_unsigned                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL alpha1_1                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL alpha1_D_Lookup_Table1_k         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha1_D_Lookup_Table1_out1      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL in_rsvd                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Constant8_out1                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Constant14_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL out_rsvd                         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Sum1_out1                        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Relational_Operator7_relop1      : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Switch4_out1                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Delay3_out1                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Relational_Operator4_relop1      : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Compare_To_Zero2_out1            : std_logic;
  SIGNAL s_state_out1_2                   : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL nume_gain113_mul_temp            : signed(61 DOWNTO 0);  -- sfix62_En64
  SIGNAL s_nume_gain1_1                   : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL s_nume_acc_cast1_1               : signed(45 DOWNTO 0);  -- sfix46_En48
  SIGNAL s_denom_acc_out1_1               : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL denom_gain113_mul_temp           : signed(62 DOWNTO 0);  -- sfix63_En70
  SIGNAL s_denom_gain1_1                  : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL s_state_out1_3                   : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL nume_gain18_mul_temp             : signed(58 DOWNTO 0);  -- sfix59_En54
  SIGNAL nume_gain18_factor               : signed(58 DOWNTO 0);  -- sfix59
  SIGNAL s_nume_gain1_2                   : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL s_nume_acc_cast1_2               : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_denom_acc_out1_2               : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL denom_gain18_mul_temp            : signed(59 DOWNTO 0);  -- sfix60_En64
  SIGNAL s_denom_gain1_2                  : signed(45 DOWNTO 0);  -- sfix46_En53
  SIGNAL s_denom_acc_cast1                : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL s_state_out1_4                   : signed(45 DOWNTO 0);  -- sfix46_En38
  SIGNAL nume_gain19_mul_temp             : signed(62 DOWNTO 0);  -- sfix63_En57
  SIGNAL s_nume_gain1_3                   : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_acc_cast1_3               : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL s_denom_acc_out1_3               : signed(45 DOWNTO 0);  -- sfix46_En38
  SIGNAL denom_gain19_mul_temp            : signed(63 DOWNTO 0);  -- sfix64_En54
  SIGNAL s_denom_gain1_3                  : signed(45 DOWNTO 0);  -- sfix46_En38
  SIGNAL s_state_out1_5                   : signed(45 DOWNTO 0);  -- sfix46_En38
  SIGNAL nume_gain110_mul_temp            : signed(63 DOWNTO 0);  -- sfix64_En58
  SIGNAL s_nume_gain1_4                   : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_acc_cast1_4               : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL s_denom_acc_out1_4               : signed(45 DOWNTO 0);  -- sfix46_En38
  SIGNAL denom_gain110_mul_temp           : signed(63 DOWNTO 0);  -- sfix64_En54
  SIGNAL s_denom_gain1_4                  : signed(45 DOWNTO 0);  -- sfix46_En38
  SIGNAL s_state_out1_6                   : signed(45 DOWNTO 0);  -- sfix46_En56
  SIGNAL nume_gain14_mul_temp             : signed(62 DOWNTO 0);  -- sfix63_En65
  SIGNAL s_nume_gain1_5                   : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL s_nume_acc_cast1_5               : signed(45 DOWNTO 0);  -- sfix46_En48
  SIGNAL s_denom_acc_out1_5               : signed(45 DOWNTO 0);  -- sfix46_En56
  SIGNAL denom_gain14_mul_temp            : signed(62 DOWNTO 0);  -- sfix63_En71
  SIGNAL s_denom_gain1_5                  : signed(45 DOWNTO 0);  -- sfix46_En56
  SIGNAL s_state_out1_7                   : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL nume_gain111_mul_temp            : signed(62 DOWNTO 0);  -- sfix63_En62
  SIGNAL s_nume_gain1_6                   : signed(45 DOWNTO 0);  -- sfix46_En46
  SIGNAL s_nume_acc_cast1_6               : signed(45 DOWNTO 0);  -- sfix46_En45
  SIGNAL s_denom_acc_out1_6               : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL denom_gain111_mul_temp           : signed(63 DOWNTO 0);  -- sfix64_En65
  SIGNAL s_denom_gain1_6                  : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL s_state_out1_8                   : signed(45 DOWNTO 0);  -- sfix46_En46
  SIGNAL nume_gain112_mul_temp            : signed(62 DOWNTO 0);  -- sfix63_En59
  SIGNAL s_nume_gain1_7                   : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL s_nume_acc_cast1_7               : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_denom_acc_out1_7               : signed(45 DOWNTO 0);  -- sfix46_En46
  SIGNAL denom_gain112_mul_temp           : signed(60 DOWNTO 0);  -- sfix61_En59
  SIGNAL s_denom_gain1_7                  : signed(45 DOWNTO 0);  -- sfix46_En46
  SIGNAL s_state_out1_9                   : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL nume_gain13_mul_temp             : signed(62 DOWNTO 0);  -- sfix63_En57
  SIGNAL s_nume_gain1_8                   : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_acc_cast1_8               : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL s_denom_acc_out1_8               : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL denom_gain13_mul_temp            : signed(61 DOWNTO 0);  -- sfix62_En56
  SIGNAL s_denom_gain1_8                  : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL V12                              : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Difference5_out1                 : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Difference5_out1_signed          : signed(45 DOWNTO 0);  -- sfix46_En51
  SIGNAL Gain44_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En97
  SIGNAL I11                              : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL Gain53_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En98
  SIGNAL I2                               : signed(45 DOWNTO 0);  -- sfix46_En53
  SIGNAL Sum23_add_cast                   : signed(47 DOWNTO 0);  -- sfix48_En53
  SIGNAL Sum23_add_cast_1                 : signed(47 DOWNTO 0);  -- sfix48_En53
  SIGNAL Sum23_add_temp                   : signed(47 DOWNTO 0);  -- sfix48_En53
  SIGNAL Sum23_out1                       : signed(45 DOWNTO 0);  -- sfix46_En53
  SIGNAL V15                              : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Path_Delay_3_out1                : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL s_state_out1_10                  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL nume_gain12_mul_temp             : signed(60 DOWNTO 0);  -- sfix61_En56
  SIGNAL s_nume_gain1_9                   : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL s_nume_acc_cast1_9               : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_denom_acc_out1_9               : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL denom_gain12_mul_temp            : signed(63 DOWNTO 0);  -- sfix64_En57
  SIGNAL s_denom_gain1_9                  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Comparator_Logic_out1            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Comparator_Logic_out1_signed     : signed(45 DOWNTO 0);  -- sfix46_En53
  SIGNAL V9                               : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Gain55_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En98
  SIGNAL I2_1                             : signed(45 DOWNTO 0);  -- sfix46_En53
  SIGNAL Difference6_out1                 : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Difference6_out1_signed          : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL Gain45_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En96
  SIGNAL I10                              : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL Sum24_add_cast                   : signed(47 DOWNTO 0);  -- sfix48_En53
  SIGNAL Sum24_add_cast_1                 : signed(47 DOWNTO 0);  -- sfix48_En53
  SIGNAL Sum24_add_temp                   : signed(47 DOWNTO 0);  -- sfix48_En53
  SIGNAL I10_1                            : signed(45 DOWNTO 0);  -- sfix46_En53
  SIGNAL Sum25_add_cast                   : signed(46 DOWNTO 0);  -- sfix47_En53
  SIGNAL Sum25_add_cast_1                 : signed(46 DOWNTO 0);  -- sfix47_En53
  SIGNAL Sum25_add_temp                   : signed(46 DOWNTO 0);  -- sfix47_En53
  SIGNAL I10_2                            : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL Delay_Mod4_out1                  : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL s_input_acc_cast_1               : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL denom_acc12_sub_cast             : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL denom_acc12_sub_cast_1           : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL denom_acc12_sub_temp             : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL nume_gain_b02_mul_temp           : signed(60 DOWNTO 0);  -- sfix61_En56
  SIGNAL s_nume_gain_b0_1                 : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL s_nume_gain_b0_cast_1            : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_acc12_add_cast            : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc12_add_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc12_add_temp            : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc_out1_1                : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL V10                              : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Gain51_cast                      : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL Gain51_cast_1                    : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL Gain51_cast_2                    : signed(91 DOWNTO 0);  -- sfix92_En87
  SIGNAL Gain51_out1                      : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Discrete_Time_Integrator5_indtc  : signed(45 DOWNTO 0);  -- sfix46
  SIGNAL gain3_mul_temp                   : signed(91 DOWNTO 0);  -- sfix92_En47
  SIGNAL Discrete_Time_Integrator5_u_gain : signed(45 DOWNTO 0);  -- sfix46
  SIGNAL Discrete_Time_Integrator5_u_dtc  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL adder7_add_cast                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder7_add_cast_1                : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder7_add_temp                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL Discrete_Time_Integrator5_y_add  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Discrete_Time_Integrator5_y_sat  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Discrete_Time_Integrator5_x_reg  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL adder6_add_cast                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder6_add_cast_1                : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder6_add_temp                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL Discrete_Time_Integrator5_x_add  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL I11_1                            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL I11_signed                       : signed(45 DOWNTO 0);  -- sfix46_En53
  SIGNAL Sum22_add_cast                   : signed(46 DOWNTO 0);  -- sfix47_En53
  SIGNAL Sum22_add_cast_1                 : signed(46 DOWNTO 0);  -- sfix47_En53
  SIGNAL Sum22_add_temp                   : signed(46 DOWNTO 0);  -- sfix47_En53
  SIGNAL I11_2                            : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL Delay_Mod3_out1                  : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL s_input_acc_cast_2               : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL denom_acc13_sub_cast             : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL denom_acc13_sub_cast_1           : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL denom_acc13_sub_temp             : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL nume_gain_b03_mul_temp           : signed(62 DOWNTO 0);  -- sfix63_En57
  SIGNAL s_nume_gain_b0_2                 : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_gain_b0_cast_2            : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL s_nume_acc13_add_cast            : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc13_add_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc13_add_temp            : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc_out1_2                : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL V11                              : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Gain52_cast                      : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL Gain52_cast_1                    : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL Gain52_cast_2                    : signed(91 DOWNTO 0);  -- sfix92_En86
  SIGNAL Gain52_out1                      : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Discrete_Time_Integrator6_indtc  : signed(45 DOWNTO 0);  -- sfix46
  SIGNAL gain4_mul_temp                   : signed(91 DOWNTO 0);  -- sfix92_En46
  SIGNAL Discrete_Time_Integrator6_u_gain : signed(45 DOWNTO 0);  -- sfix46
  SIGNAL Discrete_Time_Integrator6_u_dtc  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL adder9_add_cast                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder9_add_cast_1                : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder9_add_temp                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL Discrete_Time_Integrator6_y_add  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Discrete_Time_Integrator6_y_sat  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Discrete_Time_Integrator6_x_reg  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL adder8_add_cast                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder8_add_cast_1                : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder8_add_temp                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL Discrete_Time_Integrator6_x_add  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Gain59_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En99
  SIGNAL I30                              : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL Path_Delay_4_out1                : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL V29                              : signed(45 DOWNTO 0);  -- sfix46_En45
  SIGNAL Gain48_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En103
  SIGNAL I30_1                            : signed(45 DOWNTO 0);  -- sfix46_En58
  SIGNAL Sum21_add_cast                   : signed(49 DOWNTO 0);  -- sfix50_En58
  SIGNAL Sum21_add_cast_1                 : signed(49 DOWNTO 0);  -- sfix50_En58
  SIGNAL Sum21_add_temp                   : signed(49 DOWNTO 0);  -- sfix50_En58
  SIGNAL I30_2                            : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL s_input_acc_cast_3               : signed(45 DOWNTO 0);  -- sfix46_En46
  SIGNAL denom_acc112_sub_cast            : signed(46 DOWNTO 0);  -- sfix47_En46
  SIGNAL denom_acc112_sub_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En46
  SIGNAL denom_acc112_sub_temp            : signed(46 DOWNTO 0);  -- sfix47_En46
  SIGNAL nume_gain_b012_mul_temp          : signed(62 DOWNTO 0);  -- sfix63_En59
  SIGNAL s_nume_gain_b0_3                 : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL s_nume_gain_b0_cast_3            : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_acc112_add_cast           : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc112_add_cast_1         : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc112_add_temp           : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc_out1_3                : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL V30                              : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Gain47_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En100
  SIGNAL Gain47_out1                      : signed(45 DOWNTO 0);  -- sfix46_En56
  SIGNAL V14                              : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Gain50_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En100
  SIGNAL Gain50_factor                    : signed(91 DOWNTO 0);  -- sfix92
  SIGNAL Gain50_factor_1                  : signed(91 DOWNTO 0);  -- sfix92
  SIGNAL Gain50_factor_2                  : signed(91 DOWNTO 0);  -- sfix92
  SIGNAL I29                              : signed(45 DOWNTO 0);  -- sfix46_En56
  SIGNAL V13                              : signed(45 DOWNTO 0);  -- sfix46_En48
  SIGNAL Gain49_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En106
  SIGNAL I29_1                            : signed(45 DOWNTO 0);  -- sfix46_En62
  SIGNAL Sum20_stage2_add_cast            : signed(53 DOWNTO 0);  -- sfix54_En62
  SIGNAL Sum20_stage2_add_cast_1          : signed(53 DOWNTO 0);  -- sfix54_En62
  SIGNAL Sum20_stage2_add_temp            : signed(53 DOWNTO 0);  -- sfix54_En62
  SIGNAL Sum20_op_stage1                  : signed(52 DOWNTO 0);  -- sfix53_En62
  SIGNAL Sum20_stage3_add_cast            : signed(53 DOWNTO 0);  -- sfix54_En62
  SIGNAL Sum20_stage3_add_cast_1          : signed(53 DOWNTO 0);  -- sfix54_En62
  SIGNAL Sum20_stage3_add_temp            : signed(53 DOWNTO 0);  -- sfix54_En62
  SIGNAL I29_2                            : signed(45 DOWNTO 0);  -- sfix46_En57
  SIGNAL Delay_Mod2_out1                  : signed(45 DOWNTO 0);  -- sfix46_En57
  SIGNAL s_input_acc_cast_4               : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL denom_acc111_sub_cast            : signed(46 DOWNTO 0);  -- sfix47_En49
  SIGNAL denom_acc111_sub_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En49
  SIGNAL denom_acc111_sub_temp            : signed(46 DOWNTO 0);  -- sfix47_En49
  SIGNAL nume_gain_b011_mul_temp          : signed(62 DOWNTO 0);  -- sfix63_En62
  SIGNAL s_nume_gain_b0_4                 : signed(45 DOWNTO 0);  -- sfix46_En46
  SIGNAL s_nume_gain_b0_cast_4            : signed(45 DOWNTO 0);  -- sfix46_En45
  SIGNAL s_nume_acc111_add_cast           : signed(46 DOWNTO 0);  -- sfix47_En45
  SIGNAL s_nume_acc111_add_cast_1         : signed(46 DOWNTO 0);  -- sfix47_En45
  SIGNAL s_nume_acc111_add_temp           : signed(46 DOWNTO 0);  -- sfix47_En45
  SIGNAL s_nume_acc_out1_4                : signed(45 DOWNTO 0);  -- sfix46_En45
  SIGNAL Gain43_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En103
  SIGNAL I13                              : signed(45 DOWNTO 0);  -- sfix46_En58
  SIGNAL Difference7_out1                 : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Difference7_out1_signed          : signed(45 DOWNTO 0);  -- sfix46_En51
  SIGNAL Gain46_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En103
  SIGNAL I13_1                            : signed(45 DOWNTO 0);  -- sfix46_En58
  SIGNAL Sum28_add_cast                   : signed(46 DOWNTO 0);  -- sfix47_En58
  SIGNAL Sum28_add_cast_1                 : signed(46 DOWNTO 0);  -- sfix47_En58
  SIGNAL Sum28_add_temp                   : signed(46 DOWNTO 0);  -- sfix47_En58
  SIGNAL I13_2                            : signed(45 DOWNTO 0);  -- sfix46_En62
  SIGNAL Delay_Mod5_out1                  : signed(45 DOWNTO 0);  -- sfix46_En62
  SIGNAL s_input_acc_cast_5               : signed(45 DOWNTO 0);  -- sfix46_En56
  SIGNAL denom_acc14_sub_cast             : signed(46 DOWNTO 0);  -- sfix47_En56
  SIGNAL denom_acc14_sub_cast_1           : signed(46 DOWNTO 0);  -- sfix47_En56
  SIGNAL denom_acc14_sub_temp             : signed(46 DOWNTO 0);  -- sfix47_En56
  SIGNAL nume_gain_b04_mul_temp           : signed(62 DOWNTO 0);  -- sfix63_En65
  SIGNAL s_nume_gain_b0_5                 : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL s_nume_gain_b0_cast_5            : signed(45 DOWNTO 0);  -- sfix46_En48
  SIGNAL s_nume_acc14_add_cast            : signed(46 DOWNTO 0);  -- sfix47_En48
  SIGNAL s_nume_acc14_add_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En48
  SIGNAL s_nume_acc14_add_temp            : signed(46 DOWNTO 0);  -- sfix47_En48
  SIGNAL s_nume_acc_out1_5                : signed(45 DOWNTO 0);  -- sfix46_En48
  SIGNAL Gain61_cast                      : signed(46 DOWNTO 0);  -- sfix47_En48
  SIGNAL Gain61_cast_1                    : signed(46 DOWNTO 0);  -- sfix47_En48
  SIGNAL Gain61_cast_2                    : signed(91 DOWNTO 0);  -- sfix92_En93
  SIGNAL Gain61_out1                      : signed(45 DOWNTO 0);  -- sfix46_En48
  SIGNAL Discrete_Time_Integrator1_indtc  : signed(45 DOWNTO 0);  -- sfix46
  SIGNAL gain_mul_temp                    : signed(91 DOWNTO 0);  -- sfix92_En53
  SIGNAL Discrete_Time_Integrator1_u_gain : signed(45 DOWNTO 0);  -- sfix46
  SIGNAL Discrete_Time_Integrator1_u_dtc  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL adder1_add_cast                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder1_add_cast_1                : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder1_add_temp                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL Discrete_Time_Integrator1_y_add  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Discrete_Time_Integrator1_y_sat  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Discrete_Time_Integrator1_x_reg  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL adder_add_cast                   : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder_add_cast_1                 : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder_add_temp                   : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL Discrete_Time_Integrator1_x_add  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Gain62_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En97
  SIGNAL I28                              : signed(45 DOWNTO 0);  -- sfix46_En53
  SIGNAL Path_Delay_5_out1                : signed(45 DOWNTO 0);  -- sfix46_En53
  SIGNAL V24                              : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Difference9_out1                 : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Difference9_out1_signed          : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL Gain57_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En94
  SIGNAL Gain57_factor                    : signed(91 DOWNTO 0);  -- sfix92
  SIGNAL I1_1                             : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL Sum14_add_cast                   : signed(50 DOWNTO 0);  -- sfix51_En53
  SIGNAL Sum14_add_cast_1                 : signed(50 DOWNTO 0);  -- sfix51_En53
  SIGNAL Sum14_add_temp                   : signed(50 DOWNTO 0);  -- sfix51_En53
  SIGNAL I28_1                            : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL s_input_acc_cast_6               : signed(45 DOWNTO 0);  -- sfix46_En38
  SIGNAL denom_acc110_sub_cast            : signed(46 DOWNTO 0);  -- sfix47_En38
  SIGNAL denom_acc110_sub_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En38
  SIGNAL denom_acc110_sub_temp            : signed(46 DOWNTO 0);  -- sfix47_En38
  SIGNAL nume_gain_b010_mul_temp          : signed(63 DOWNTO 0);  -- sfix64_En58
  SIGNAL s_nume_gain_b0_6                 : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_gain_b0_cast_6            : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL s_nume_acc110_add_cast           : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc110_add_cast_1         : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc110_add_temp           : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc_out1_6                : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL V28                              : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Difference8_out1                 : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Difference8_out1_signed          : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL Gain64_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En94
  SIGNAL Gain64_factor                    : signed(91 DOWNTO 0);  -- sfix92
  SIGNAL Gain64_out1                      : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL V24_signed                       : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Product_mul_temp                 : signed(67 DOWNTO 0);  -- sfix68_En71
  SIGNAL Product_out1                     : signed(45 DOWNTO 0);  -- sfix46_En51
  SIGNAL s_state_out1_11                  : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL nume_gain17_mul_temp             : signed(63 DOWNTO 0);  -- sfix64_En59
  SIGNAL s_nume_gain1_10                  : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_acc_cast1_10              : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL s_denom_acc_out1_10              : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL denom_gain17_mul_temp            : signed(61 DOWNTO 0);  -- sfix62_En56
  SIGNAL s_denom_gain1_10                 : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL V25                              : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Difference11_out1                : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Difference11_out1_signed         : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL Gain66_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En95
  SIGNAL I21                              : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL s_state_out1_12                  : signed(45 DOWNTO 0);  -- sfix46_En45
  SIGNAL nume_gain115_mul_temp            : signed(62 DOWNTO 0);  -- sfix63_En58
  SIGNAL s_nume_gain1_11                  : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_acc_cast1_11              : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL s_denom_acc_out1_11              : signed(45 DOWNTO 0);  -- sfix46_En45
  SIGNAL denom_gain115_mul_temp           : signed(63 DOWNTO 0);  -- sfix64_En61
  SIGNAL s_denom_gain1_11                 : signed(45 DOWNTO 0);  -- sfix46_En45
  SIGNAL s_state_out1_13                  : signed(45 DOWNTO 0);  -- sfix46_En46
  SIGNAL nume_gain16_mul_temp             : signed(62 DOWNTO 0);  -- sfix63_En59
  SIGNAL s_nume_gain1_12                  : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL s_nume_acc_cast1_12              : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_denom_acc_out1_12              : signed(45 DOWNTO 0);  -- sfix46_En46
  SIGNAL denom_gain16_mul_temp            : signed(63 DOWNTO 0);  -- sfix64_En62
  SIGNAL denom_gain16_factor              : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL denom_gain16_factor_1            : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL s_denom_gain1_12                 : signed(45 DOWNTO 0);  -- sfix46_En46
  SIGNAL V16                              : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Gain17_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En100
  SIGNAL I20                              : signed(45 DOWNTO 0);  -- sfix46_En56
  SIGNAL s_state_out1_14                  : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL nume_gain15_mul_temp             : signed(61 DOWNTO 0);  -- sfix62_En58
  SIGNAL nume_gain15_factor               : signed(61 DOWNTO 0);  -- sfix62
  SIGNAL s_nume_gain1_13                  : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL s_nume_acc_cast1_13              : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_denom_acc_out1_13              : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL denom_gain15_mul_temp            : signed(62 DOWNTO 0);  -- sfix63_En65
  SIGNAL s_denom_gain1_13                 : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL Difference4_out1                 : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Difference4_out1_signed          : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL Gain42_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En102
  SIGNAL I6                               : signed(45 DOWNTO 0);  -- sfix46_En58
  SIGNAL V20                              : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Gain18_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En100
  SIGNAL I16                              : signed(45 DOWNTO 0);  -- sfix46_En56
  SIGNAL Sum8_add_cast                    : signed(48 DOWNTO 0);  -- sfix49_En58
  SIGNAL Sum8_add_cast_1                  : signed(48 DOWNTO 0);  -- sfix49_En58
  SIGNAL Sum8_add_temp                    : signed(48 DOWNTO 0);  -- sfix49_En58
  SIGNAL I16_1                            : signed(45 DOWNTO 0);  -- sfix46_En56
  SIGNAL Delay_Mod1_out1                  : signed(45 DOWNTO 0);  -- sfix46_En56
  SIGNAL s_input_acc_cast_7               : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL denom_acc15_sub_cast             : signed(46 DOWNTO 0);  -- sfix47_En50
  SIGNAL denom_acc15_sub_cast_1           : signed(46 DOWNTO 0);  -- sfix47_En50
  SIGNAL denom_acc15_sub_temp             : signed(46 DOWNTO 0);  -- sfix47_En50
  SIGNAL nume_gain_b05_mul_temp           : signed(61 DOWNTO 0);  -- sfix62_En58
  SIGNAL nume_gain_b05_factor             : signed(61 DOWNTO 0);  -- sfix62
  SIGNAL s_nume_gain_b0_7                 : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL s_nume_gain_b0_cast_7            : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_acc15_add_cast            : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc15_add_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc15_add_temp            : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc_out1_7                : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Gain19_cast                      : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL Gain19_cast_1                    : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL Gain19_cast_2                    : signed(91 DOWNTO 0);  -- sfix92_En87
  SIGNAL Gain19_out1                      : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Discrete_Time_Integrator4_indtc  : signed(45 DOWNTO 0);  -- sfix46
  SIGNAL gain2_mul_temp                   : signed(91 DOWNTO 0);  -- sfix92_En47
  SIGNAL Discrete_Time_Integrator4_u_gain : signed(45 DOWNTO 0);  -- sfix46
  SIGNAL Discrete_Time_Integrator4_u_dtc  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL adder5_add_cast                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder5_add_cast_1                : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder5_add_temp                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL Discrete_Time_Integrator4_y_add  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Discrete_Time_Integrator4_y_sat  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Discrete_Time_Integrator4_x_reg  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL adder4_add_cast                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder4_add_cast_1                : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder4_add_temp                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL Discrete_Time_Integrator4_x_add  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Gain60_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En101
  SIGNAL I20_1                            : signed(45 DOWNTO 0);  -- sfix46_En57
  SIGNAL V8                               : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Gain16_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En99
  SIGNAL I20_2                            : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL Sum7_stage2_add_cast             : signed(48 DOWNTO 0);  -- sfix49_En57
  SIGNAL Sum7_stage2_add_cast_1           : signed(48 DOWNTO 0);  -- sfix49_En57
  SIGNAL Sum7_op_stage1                   : signed(48 DOWNTO 0);  -- sfix49_En57
  SIGNAL Sum7_stage3_add_cast             : signed(49 DOWNTO 0);  -- sfix50_En57
  SIGNAL Sum7_stage3_add_cast_1           : signed(48 DOWNTO 0);  -- sfix49_En57
  SIGNAL Sum7_stage3_add_cast_2           : signed(49 DOWNTO 0);  -- sfix50_En57
  SIGNAL Sum7_stage3_add_temp             : signed(49 DOWNTO 0);  -- sfix50_En57
  SIGNAL Sum7_stage3_cast                 : signed(48 DOWNTO 0);  -- sfix49_En57
  SIGNAL I20_3                            : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL s_input_acc_cast_8               : signed(45 DOWNTO 0);  -- sfix46_En46
  SIGNAL denom_acc16_sub_cast             : signed(46 DOWNTO 0);  -- sfix47_En46
  SIGNAL denom_acc16_sub_cast_1           : signed(46 DOWNTO 0);  -- sfix47_En46
  SIGNAL denom_acc16_sub_temp             : signed(46 DOWNTO 0);  -- sfix47_En46
  SIGNAL nume_gain_b06_mul_temp           : signed(62 DOWNTO 0);  -- sfix63_En59
  SIGNAL s_nume_gain_b0_8                 : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL s_nume_gain_b0_cast_8            : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_acc16_add_cast            : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc16_add_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc16_add_temp            : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc_out1_8                : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Gain15_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En100
  SIGNAL I8                               : signed(45 DOWNTO 0);  -- sfix46_En56
  SIGNAL s_nume_acc_out1_9                : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL V21                              : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Gain31_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En100
  SIGNAL Gain31_out1                      : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL s_state_out1_15                  : signed(45 DOWNTO 0);  -- sfix46_En38
  SIGNAL nume_gain114_mul_temp            : signed(62 DOWNTO 0);  -- sfix63_En57
  SIGNAL s_nume_gain1_14                  : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_acc_cast1_14              : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL s_denom_acc_out1_14              : signed(45 DOWNTO 0);  -- sfix46_En38
  SIGNAL denom_gain114_mul_temp           : signed(63 DOWNTO 0);  -- sfix64_En54
  SIGNAL s_denom_gain1_14                 : signed(45 DOWNTO 0);  -- sfix46_En38
  SIGNAL Gain14_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En99
  SIGNAL I7                               : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL Sum5_add_cast                    : signed(58 DOWNTO 0);  -- sfix59_En55
  SIGNAL Sum5_add_cast_1                  : signed(58 DOWNTO 0);  -- sfix59_En55
  SIGNAL Sum5_add_temp                    : signed(58 DOWNTO 0);  -- sfix59_En55
  SIGNAL I7_1                             : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL s_input_acc_cast_9               : signed(45 DOWNTO 0);  -- sfix46_En38
  SIGNAL denom_acc114_sub_cast            : signed(46 DOWNTO 0);  -- sfix47_En38
  SIGNAL denom_acc114_sub_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En38
  SIGNAL denom_acc114_sub_temp            : signed(46 DOWNTO 0);  -- sfix47_En38
  SIGNAL nume_gain_b014_mul_temp          : signed(62 DOWNTO 0);  -- sfix63_En57
  SIGNAL s_nume_gain_b0_9                 : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_gain_b0_cast_9            : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL s_nume_acc114_add_cast           : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc114_add_cast_1         : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc114_add_temp           : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc_out1_10               : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL V7                               : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Gain12_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En99
  SIGNAL I8_1                             : signed(45 DOWNTO 0);  -- sfix46_En54
  SIGNAL Sum6_stage2_add_cast             : signed(48 DOWNTO 0);  -- sfix49_En56
  SIGNAL Sum6_stage2_add_cast_1           : signed(48 DOWNTO 0);  -- sfix49_En56
  SIGNAL Sum6_stage2_add_temp             : signed(48 DOWNTO 0);  -- sfix49_En56
  SIGNAL Sum6_op_stage1                   : signed(47 DOWNTO 0);  -- sfix48_En55
  SIGNAL Sum6_stage3_add_cast             : signed(48 DOWNTO 0);  -- sfix49_En56
  SIGNAL Sum6_stage3_add_cast_1           : signed(49 DOWNTO 0);  -- sfix50_En56
  SIGNAL Sum6_stage3_add_cast_2           : signed(48 DOWNTO 0);  -- sfix49_En56
  SIGNAL Sum6_stage3_add_cast_3           : signed(49 DOWNTO 0);  -- sfix50_En56
  SIGNAL Sum6_stage3_add_temp             : signed(49 DOWNTO 0);  -- sfix50_En56
  SIGNAL Sum6_stage3_cast                 : signed(48 DOWNTO 0);  -- sfix49_En56
  SIGNAL I8_2                             : signed(45 DOWNTO 0);  -- sfix46_En53
  SIGNAL Delay_Mod6_out1                  : signed(45 DOWNTO 0);  -- sfix46_En53
  SIGNAL s_input_acc_cast_10              : signed(45 DOWNTO 0);  -- sfix46_En45
  SIGNAL denom_acc115_sub_cast            : signed(46 DOWNTO 0);  -- sfix47_En45
  SIGNAL denom_acc115_sub_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En45
  SIGNAL denom_acc115_sub_temp            : signed(46 DOWNTO 0);  -- sfix47_En45
  SIGNAL nume_gain_b015_mul_temp          : signed(62 DOWNTO 0);  -- sfix63_En58
  SIGNAL s_nume_gain_b0_10                : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_gain_b0_cast_10           : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL s_nume_acc115_add_cast           : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc115_add_cast_1         : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc115_add_temp           : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc_out1_11               : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Gain32_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En100
  SIGNAL Gain32_out1                      : signed(45 DOWNTO 0);  -- sfix46_En56
  SIGNAL Sum12_add_cast                   : signed(52 DOWNTO 0);  -- sfix53_En56
  SIGNAL Sum12_add_cast_1                 : signed(52 DOWNTO 0);  -- sfix53_En56
  SIGNAL Sum12_add_temp                   : signed(52 DOWNTO 0);  -- sfix53_En56
  SIGNAL I21_1                            : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL s_input_acc_cast_11              : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL denom_acc17_sub_cast             : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL denom_acc17_sub_cast_1           : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL denom_acc17_sub_temp             : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL nume_gain_b07_mul_temp           : signed(63 DOWNTO 0);  -- sfix64_En59
  SIGNAL s_nume_gain_b0_11                : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_gain_b0_cast_11           : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL s_nume_acc17_add_cast            : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc17_add_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc17_add_temp            : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL Difference10_out1                : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Difference10_out1_signed         : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL Gain65_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En95
  SIGNAL I22                              : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL Sum11_add_cast                   : signed(47 DOWNTO 0);  -- sfix48_En51
  SIGNAL Sum11_add_cast_1                 : signed(47 DOWNTO 0);  -- sfix48_En51
  SIGNAL Sum11_add_temp                   : signed(47 DOWNTO 0);  -- sfix48_En51
  SIGNAL I22_1                            : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL Delay_Mod8_out1                  : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL V25_signed                       : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Product1_mul_temp                : signed(67 DOWNTO 0);  -- sfix68_En71
  SIGNAL Product1_out1                    : signed(45 DOWNTO 0);  -- sfix46_En51
  SIGNAL Product5_mul_temp                : signed(67 DOWNTO 0);  -- sfix68_En70
  SIGNAL Product5_out1                    : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL V25_1                            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL V25_signed_1                     : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Product4_mul_temp                : signed(67 DOWNTO 0);  -- sfix68_En70
  SIGNAL Product4_out1                    : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL V24_1                            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL V24_signed_1                     : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Product2_mul_temp                : signed(67 DOWNTO 0);  -- sfix68_En72
  SIGNAL Product2_out1                    : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL Sum18_add_cast                   : signed(49 DOWNTO 0);  -- sfix50_En52
  SIGNAL Sum18_add_cast_1                 : signed(49 DOWNTO 0);  -- sfix50_En52
  SIGNAL Sum18_add_temp                   : signed(49 DOWNTO 0);  -- sfix50_En52
  SIGNAL Sum18_out1                       : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL Sum13_stage2_add_cast            : signed(49 DOWNTO 0);  -- sfix50_En51
  SIGNAL Sum13_stage2_add_cast_1          : signed(49 DOWNTO 0);  -- sfix50_En51
  SIGNAL Sum13_stage2_add_temp            : signed(49 DOWNTO 0);  -- sfix50_En51
  SIGNAL Sum13_op_stage1                  : signed(48 DOWNTO 0);  -- sfix49_En51
  SIGNAL Sum13_stage3_add_cast            : signed(49 DOWNTO 0);  -- sfix50_En51
  SIGNAL Sum13_stage3_add_cast_1          : signed(49 DOWNTO 0);  -- sfix50_En51
  SIGNAL Sum13_stage3_add_temp            : signed(49 DOWNTO 0);  -- sfix50_En51
  SIGNAL I23                              : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL Delay_Mod9_out1                  : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL Product3_mul_temp                : signed(67 DOWNTO 0);  -- sfix68_En72
  SIGNAL Product3_out1                    : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL s_nume_acc_out1_12               : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Difference12_out1                : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Difference12_out1_signed         : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL Gain67_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En94
  SIGNAL Gain67_factor                    : signed(91 DOWNTO 0);  -- sfix92
  SIGNAL I24                              : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL Sum15_add_cast                   : signed(49 DOWNTO 0);  -- sfix50_En52
  SIGNAL Sum15_add_cast_1                 : signed(49 DOWNTO 0);  -- sfix50_En52
  SIGNAL Sum15_add_temp                   : signed(49 DOWNTO 0);  -- sfix50_En52
  SIGNAL I24_1                            : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL Difference13_out1                : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Difference13_out1_signed         : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL Gain68_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En94
  SIGNAL Gain68_factor                    : signed(91 DOWNTO 0);  -- sfix92
  SIGNAL Gain68_out1                      : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL V26                              : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Gain25_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En100
  SIGNAL I27                              : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL Sum10_add_cast                   : signed(52 DOWNTO 0);  -- sfix53_En55
  SIGNAL Sum10_add_cast_1                 : signed(52 DOWNTO 0);  -- sfix53_En55
  SIGNAL Sum10_add_temp                   : signed(52 DOWNTO 0);  -- sfix53_En55
  SIGNAL I27_1                            : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL Delay2_out1                      : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL s_input_acc_cast_12              : signed(45 DOWNTO 0);  -- sfix46_En38
  SIGNAL denom_acc19_sub_cast             : signed(46 DOWNTO 0);  -- sfix47_En38
  SIGNAL denom_acc19_sub_cast_1           : signed(46 DOWNTO 0);  -- sfix47_En38
  SIGNAL denom_acc19_sub_temp             : signed(46 DOWNTO 0);  -- sfix47_En38
  SIGNAL nume_gain_b09_mul_temp           : signed(62 DOWNTO 0);  -- sfix63_En57
  SIGNAL s_nume_gain_b0_12                : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_gain_b0_cast_12           : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL s_nume_acc19_add_cast            : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc19_add_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL s_nume_acc19_add_temp            : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL V27                              : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Gain26_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En99
  SIGNAL I26                              : signed(45 DOWNTO 0);  -- sfix46_En54
  SIGNAL V4                               : signed(45 DOWNTO 0);  -- sfix46_En48
  SIGNAL Gain23_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En106
  SIGNAL I26_1                            : signed(45 DOWNTO 0);  -- sfix46_En62
  SIGNAL Sum3_add_cast                    : signed(54 DOWNTO 0);  -- sfix55_En62
  SIGNAL Sum3_add_cast_1                  : signed(54 DOWNTO 0);  -- sfix55_En62
  SIGNAL Sum3_add_temp                    : signed(54 DOWNTO 0);  -- sfix55_En62
  SIGNAL alpha26                          : signed(45 DOWNTO 0);  -- sfix46_En54
  SIGNAL s_input_acc_cast_13              : signed(45 DOWNTO 0);  -- sfix46_En52
  SIGNAL denom_acc18_sub_cast             : signed(46 DOWNTO 0);  -- sfix47_En52
  SIGNAL denom_acc18_sub_cast_1           : signed(46 DOWNTO 0);  -- sfix47_En52
  SIGNAL denom_acc18_sub_temp             : signed(46 DOWNTO 0);  -- sfix47_En52
  SIGNAL nume_gain_b08_mul_temp           : signed(58 DOWNTO 0);  -- sfix59_En54
  SIGNAL nume_gain_b08_factor             : signed(58 DOWNTO 0);  -- sfix59
  SIGNAL s_nume_gain_b0_13                : signed(45 DOWNTO 0);  -- sfix46_En43
  SIGNAL s_nume_gain_b0_cast_13           : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL s_nume_acc18_add_cast            : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc18_add_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc18_add_temp            : signed(46 DOWNTO 0);  -- sfix47_En42
  SIGNAL s_nume_acc_out1_13               : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Gain24_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En100
  SIGNAL I4_1                             : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL V5                               : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Gain8_mul_temp                   : signed(91 DOWNTO 0);  -- sfix92_En99
  SIGNAL I2_2                             : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL Difference1_out1                 : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL Difference1_out1_signed          : signed(45 DOWNTO 0);  -- sfix46_En47
  SIGNAL Gain10_mul_temp                  : signed(91 DOWNTO 0);  -- sfix92_En102
  SIGNAL I1_2                             : signed(45 DOWNTO 0);  -- sfix46_En57
  SIGNAL Sum2_add_cast                    : signed(48 DOWNTO 0);  -- sfix49_En57
  SIGNAL Sum2_add_cast_1                  : signed(48 DOWNTO 0);  -- sfix49_En57
  SIGNAL Sum2_add_temp                    : signed(48 DOWNTO 0);  -- sfix49_En57
  SIGNAL Sum2_out1                        : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL Sum9_stage2_add_cast             : signed(48 DOWNTO 0);  -- sfix49_En56
  SIGNAL Sum9_stage2_add_cast_1           : signed(48 DOWNTO 0);  -- sfix49_En56
  SIGNAL Sum9_stage2_add_temp             : signed(48 DOWNTO 0);  -- sfix49_En56
  SIGNAL Sum9_op_stage1                   : signed(47 DOWNTO 0);  -- sfix48_En56
  SIGNAL Sum9_stage3_add_cast             : signed(48 DOWNTO 0);  -- sfix49_En56
  SIGNAL Sum9_stage3_add_cast_1           : signed(48 DOWNTO 0);  -- sfix49_En56
  SIGNAL Sum9_stage3_add_temp             : signed(48 DOWNTO 0);  -- sfix49_En56
  SIGNAL I4_2                             : signed(45 DOWNTO 0);  -- sfix46_En59
  SIGNAL Delay1_out1                      : signed(45 DOWNTO 0);  -- sfix46_En59
  SIGNAL s_input_acc_cast_14              : signed(45 DOWNTO 0);  -- sfix46_En55
  SIGNAL denom_acc113_sub_cast            : signed(46 DOWNTO 0);  -- sfix47_En55
  SIGNAL denom_acc113_sub_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En55
  SIGNAL denom_acc113_sub_temp            : signed(46 DOWNTO 0);  -- sfix47_En55
  SIGNAL nume_gain_b013_mul_temp          : signed(61 DOWNTO 0);  -- sfix62_En64
  SIGNAL s_nume_gain_b0_14                : signed(45 DOWNTO 0);  -- sfix46_En49
  SIGNAL s_nume_gain_b0_cast_14           : signed(45 DOWNTO 0);  -- sfix46_En48
  SIGNAL s_nume_acc113_add_cast           : signed(46 DOWNTO 0);  -- sfix47_En48
  SIGNAL s_nume_acc113_add_cast_1         : signed(46 DOWNTO 0);  -- sfix47_En48
  SIGNAL s_nume_acc113_add_temp           : signed(46 DOWNTO 0);  -- sfix47_En48
  SIGNAL s_nume_acc_out1_14               : signed(45 DOWNTO 0);  -- sfix46_En48
  SIGNAL Gain7_cast                       : signed(46 DOWNTO 0);  -- sfix47_En48
  SIGNAL Gain7_cast_1                     : signed(46 DOWNTO 0);  -- sfix47_En48
  SIGNAL Gain7_cast_2                     : signed(91 DOWNTO 0);  -- sfix92_En93
  SIGNAL Gain7_out1                       : signed(45 DOWNTO 0);  -- sfix46_En48
  SIGNAL Discrete_Time_Integrator2_indtc  : signed(45 DOWNTO 0);  -- sfix46
  SIGNAL gain1_mul_temp                   : signed(91 DOWNTO 0);  -- sfix92_En47
  SIGNAL Discrete_Time_Integrator2_u_gain : signed(45 DOWNTO 0);  -- sfix46
  SIGNAL Discrete_Time_Integrator2_u_dtc  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL adder3_add_cast                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder3_add_cast_1                : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder3_add_temp                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL Discrete_Time_Integrator2_y_add  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Discrete_Time_Integrator2_y_sat  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Discrete_Time_Integrator2_x_reg  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL adder2_add_cast                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder2_add_cast_1                : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL adder2_add_temp                  : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL Discrete_Time_Integrator2_x_add  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Path_Delay_2_out1                : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL s_input_acc_cast_15              : signed(45 DOWNTO 0);  -- sfix46_En23
  SIGNAL s_denom_acc_out1_15              : signed(45 DOWNTO 0);  -- sfix46_En23
  SIGNAL s_state_out1_16                  : signed(45 DOWNTO 0);  -- sfix46_En23
  SIGNAL denom_gain11_mul_temp            : signed(68 DOWNTO 0);  -- sfix69_En44
  SIGNAL s_denom_gain1_15                 : signed(45 DOWNTO 0);  -- sfix46_En23
  SIGNAL denom_acc11_sub_cast             : signed(46 DOWNTO 0);  -- sfix47_En23
  SIGNAL denom_acc11_sub_cast_1           : signed(46 DOWNTO 0);  -- sfix47_En23
  SIGNAL denom_acc11_sub_temp             : signed(46 DOWNTO 0);  -- sfix47_En23
  SIGNAL nume_gain_b01_mul_temp           : signed(65 DOWNTO 0);  -- sfix66_En42
  SIGNAL s_nume_gain_b0_15                : signed(45 DOWNTO 0);  -- sfix46_En23
  SIGNAL nume_gain11_mul_temp             : signed(65 DOWNTO 0);  -- sfix66_En42
  SIGNAL s_nume_gain1_15                  : signed(45 DOWNTO 0);  -- sfix46_En23
  SIGNAL s_nume_acc11_add_cast            : signed(46 DOWNTO 0);  -- sfix47_En23
  SIGNAL s_nume_acc11_add_cast_1          : signed(46 DOWNTO 0);  -- sfix47_En23
  SIGNAL s_nume_acc11_add_temp            : signed(46 DOWNTO 0);  -- sfix47_En23
  SIGNAL s_nume_acc_out1_15               : signed(45 DOWNTO 0);  -- sfix46_En23
  SIGNAL s_output_cast_1                  : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Rate_Transition1_bypass_reg      : signed(45 DOWNTO 0);  -- sfix46
  SIGNAL Rate_Transition1_out1            : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL Data_Type_Conversion1_out1       : signed(15 DOWNTO 0);  -- sfix16_En15

BEGIN
  u_Der_Faux_FPGA_tc : Der_Faux_FPGA_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_150_0 => enb_1_150_0,
              enb_1_150_1 => enb_1_150_1
              );

  u_Difference3 : Difference3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => std_logic_vector(Path_Delay_1_out1),  -- sfix46_En42
              Y => Difference3_out1  -- sfix46_En46
              );

  u_Difference5 : Difference5
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => std_logic_vector(V12),  -- sfix46_En41
              Y => Difference5_out1  -- sfix46_En51
              );

  u_Difference6 : Difference6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => std_logic_vector(V9),  -- sfix46_En41
              Y => Difference6_out1  -- sfix46_En52
              );

  u_Comparator_Logic : Comparator_Logic
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in_noninverted => std_logic_vector(V9),  -- sfix46_En41
              in_inverted => std_logic_vector(Path_Delay_3_out1),  -- sfix46_En41
              clk_div => Compare_To_Zero2_out1,
              out_mod => Comparator_Logic_out1,  -- sfix46_En53
              out_dem => I11_1  -- sfix46_En53
              );

  u_Difference7 : Difference7
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => std_logic_vector(V14),  -- sfix46_En41
              Y => Difference7_out1  -- sfix46_En51
              );

  u_Difference9 : Difference9
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => V24,  -- sfix46_En41
              Y => Difference9_out1  -- sfix46_En52
              );

  u_Difference8 : Difference8
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => std_logic_vector(V28),  -- sfix46_En41
              Y => Difference8_out1  -- sfix46_En52
              );

  u_Difference11 : Difference11
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => V25,  -- sfix46_En41
              Y => Difference11_out1  -- sfix46_En50
              );

  u_Difference4 : Difference4
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => std_logic_vector(V15),  -- sfix46_En41
              Y => Difference4_out1  -- sfix46_En50
              );

  u_Difference10 : Difference10
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => std_logic_vector(s_nume_acc_out1_9),  -- sfix46_En41
              Y => Difference10_out1  -- sfix46_En50
              );

  u_Z22_circuit : Z22_circuit
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Gvar1_N => std_logic_vector(alpha1),  -- ufix5
              Z22_in => std_logic_vector(Delay_Mod8_out1),  -- sfix46_En50
              Z22_out => V25  -- sfix46_En41
              );

  u_Z25_circuit : Z25_circuit
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Gvar2_N => std_logic_vector(alpha2),  -- ufix5
              Z25_in => std_logic_vector(Product5_out1),  -- sfix46_En49
              Z25_out => V25_1  -- sfix46_En41
              );

  u_Z23_circuit : Z23_circuit
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Gvar1_N => std_logic_vector(alpha1),  -- ufix5
              Gvar2_N => std_logic_vector(alpha2),  -- ufix5
              Gvar3_N => std_logic_vector(alpha3),  -- ufix5
              Data_in => std_logic_vector(Delay_Mod9_out1),  -- sfix46_En49
              Out1 => V24  -- sfix46_En41
              );

  u_Difference12 : Difference12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => std_logic_vector(s_nume_acc_out1_12),  -- sfix46_En41
              Y => Difference12_out1  -- sfix46_En52
              );

  u_Z24_circuit : Z24_circuit
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Gvar3_N => std_logic_vector(alpha3),  -- ufix5
              Z24_in => std_logic_vector(I24_1),  -- sfix46_En49
              Z24_out => V24_1  -- sfix46_En41
              );

  u_Difference13 : Difference13
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => V24_1,  -- sfix46_En41
              Y => Difference13_out1  -- sfix46_En52
              );

  u_Difference1 : Difference1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => std_logic_vector(V5),  -- sfix46_En41
              Y => Difference1_out1  -- sfix46_En47
              );

  Vin_signed <= signed(Vin);

  Data_Type_Conversion_out1 <= resize(Vin_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 46);

  Rate_Transition_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Rate_Transition_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb_1_150_0 = '1' THEN
        Rate_Transition_out1 <= Data_Type_Conversion_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition_process;


  Path_Delay_0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Path_Delay_0_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Path_Delay_0_out1 <= Rate_Transition_out1;
      END IF;
    END IF;
  END PROCESS Path_Delay_0_process;


  s_input_acc_cast <= resize(Path_Delay_0_out1(45 DOWNTO 30), 46);

  s_state_out3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out3_1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out3_1 <= s_state_out2;
      END IF;
    END IF;
  END PROCESS s_state_out3_process;


  -- CSD Encoding (50499) : 01100010101000011; Cost (Adders) = 6
  denom_gain3_mul_temp <=  - ((((((resize(s_state_out3_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 65) + resize(s_state_out3_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 65)) + resize(s_state_out3_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 65)) + resize(s_state_out3_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 65)) + resize(s_state_out3_1 & '0' & '0' & '0' & '0' & '0' & '0', 65)) + resize(s_state_out3_1 & '0', 65)) + resize(s_state_out3_1, 65));
  
  s_denom_gain3 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain3_mul_temp(64) = '0') AND (denom_gain3_mul_temp(63) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain3_mul_temp(64) = '1') AND (denom_gain3_mul_temp(63) /= '1') ELSE
      denom_gain3_mul_temp(63 DOWNTO 18);

  s_state_out2_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out2 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out2 <= s_state_out1;
      END IF;
    END IF;
  END PROCESS s_state_out2_1_process;


  -- CSD Encoding (166129) : 010100010010001'0001; Cost (Adders) = 5
  denom_gain2_mul_temp <= ((((resize(s_state_out2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 65) + resize(s_state_out2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 65)) + resize(s_state_out2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 65)) + resize(s_state_out2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 65)) - resize(s_state_out2 & '0' & '0' & '0' & '0', 65)) + resize(s_state_out2, 65);
  
  s_denom_gain2 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain2_mul_temp(64) = '0') AND (denom_gain2_mul_temp(63) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain2_mul_temp(64) = '1') AND (denom_gain2_mul_temp(63) /= '1') ELSE
      denom_gain2_mul_temp(63 DOWNTO 18);

  s_state_out1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1 <= s_state_cast;
      END IF;
    END IF;
  END PROCESS s_state_out1_1_process;


  -- CSD Encoding (181166) : 0101100010001'01'001'0; Cost (Adders) = 6
  denom_gain1_mul_temp <=  - ((((((resize(s_state_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 65) + resize(s_state_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 65)) + resize(s_state_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 65)) + resize(s_state_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 65)) - resize(s_state_out1 & '0' & '0' & '0' & '0' & '0' & '0', 65)) - resize(s_state_out1 & '0' & '0' & '0' & '0', 65)) - resize(s_state_out1 & '0', 65));
  
  s_denom_gain1 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain1_mul_temp(64) = '0') AND (denom_gain1_mul_temp(63) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain1_mul_temp(64) = '1') AND (denom_gain1_mul_temp(63) /= '1') ELSE
      denom_gain1_mul_temp(63 DOWNTO 18);

  denom_acc1_sub_cast <= resize(s_input_acc_cast, 47);
  denom_acc1_sub_cast_1 <= resize(s_denom_gain1, 47);
  denom_acc1_sub_temp <= denom_acc1_sub_cast - denom_acc1_sub_cast_1;
  
  s_denom_acc_out1 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc1_sub_temp(46) = '0') AND (denom_acc1_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc1_sub_temp(46) = '1') AND (denom_acc1_sub_temp(45) /= '1') ELSE
      denom_acc1_sub_temp(45 DOWNTO 0);

  denom_acc2_sub_cast <= resize(s_denom_acc_out1, 47);
  denom_acc2_sub_cast_1 <= resize(s_denom_gain2, 47);
  denom_acc2_sub_temp <= denom_acc2_sub_cast - denom_acc2_sub_cast_1;
  
  s_denom_acc_out2 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc2_sub_temp(46) = '0') AND (denom_acc2_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc2_sub_temp(46) = '1') AND (denom_acc2_sub_temp(45) /= '1') ELSE
      denom_acc2_sub_temp(45 DOWNTO 0);

  denom_acc3_sub_cast <= resize(s_denom_acc_out2, 47);
  denom_acc3_sub_cast_1 <= resize(s_denom_gain3, 47);
  denom_acc3_sub_temp <= denom_acc3_sub_cast - denom_acc3_sub_cast_1;
  
  s_denom_acc_out3 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc3_sub_temp(46) = '0') AND (denom_acc3_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc3_sub_temp(46) = '1') AND (denom_acc3_sub_temp(45) /= '1') ELSE
      denom_acc3_sub_temp(45 DOWNTO 0);

  
  s_state_cast <= "0111111111111111111111111111111111111111111111" WHEN (s_denom_acc_out3(45) = '0') AND (s_denom_acc_out3(44 DOWNTO 43) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_denom_acc_out3(45) = '1') AND (s_denom_acc_out3(44 DOWNTO 43) /= "11") ELSE
      s_denom_acc_out3(43 DOWNTO 0) & '0' & '0';

  -- CSD Encoding (25361) : 0110001100010001; Cost (Adders) = 5
  nume_gain_b0_mul_temp <=  - (((((resize(s_state_cast & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62) + resize(s_state_cast & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) + resize(s_state_cast & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) + resize(s_state_cast & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) + resize(s_state_cast & '0' & '0' & '0' & '0', 62)) + resize(s_state_cast, 62));
  
  s_nume_gain_b0 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b0_mul_temp(61) = '0') AND (nume_gain_b0_mul_temp(60) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b0_mul_temp(61) = '1') AND (nume_gain_b0_mul_temp(60) /= '1') ELSE
      nume_gain_b0_mul_temp(60 DOWNTO 15);

  s_nume_gain_b0_cast <= resize(s_nume_gain_b0(45 DOWNTO 1), 46);

  -- CSD Encoding (25361) : 0110001100010001; Cost (Adders) = 5
  nume_gain1_mul_temp <=  - (((((resize(s_state_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62) + resize(s_state_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) + resize(s_state_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) + resize(s_state_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) + resize(s_state_out1 & '0' & '0' & '0' & '0', 62)) + resize(s_state_out1, 62));
  
  s_nume_gain1 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain1_mul_temp(61) = '0') AND (nume_gain1_mul_temp(60) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain1_mul_temp(61) = '1') AND (nume_gain1_mul_temp(60) /= '1') ELSE
      nume_gain1_mul_temp(60 DOWNTO 15);

  s_nume_acc_cast1 <= resize(s_nume_gain1(45 DOWNTO 1), 46);

  s_nume_acc1_add_cast <= resize(s_nume_gain_b0_cast, 47);
  s_nume_acc1_add_cast_1 <= resize(s_nume_acc_cast1, 47);
  s_nume_acc1_add_temp <= s_nume_acc1_add_cast + s_nume_acc1_add_cast_1;
  
  s_nume_acc_out1 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc1_add_temp(46) = '0') AND (s_nume_acc1_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc1_add_temp(46) = '1') AND (s_nume_acc1_add_temp(45) /= '1') ELSE
      s_nume_acc1_add_temp(45 DOWNTO 0);

  -- CSD Encoding (25361) : 0110001100010001; Cost (Adders) = 5
  nume_gain2_mul_temp <= ((((resize(s_state_out2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62) + resize(s_state_out2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) + resize(s_state_out2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) + resize(s_state_out2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) + resize(s_state_out2 & '0' & '0' & '0' & '0', 62)) + resize(s_state_out2, 62);
  
  s_nume_gain2 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain2_mul_temp(61) = '0') AND (nume_gain2_mul_temp(60) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain2_mul_temp(61) = '1') AND (nume_gain2_mul_temp(60) /= '1') ELSE
      nume_gain2_mul_temp(60 DOWNTO 15);

  s_nume_acc_cast2 <= resize(s_nume_gain2(45 DOWNTO 1), 46);

  s_nume_acc2_add_cast <= resize(s_nume_acc_out1, 47);
  s_nume_acc2_add_cast_1 <= resize(s_nume_acc_cast2, 47);
  s_nume_acc2_add_temp <= s_nume_acc2_add_cast + s_nume_acc2_add_cast_1;
  
  s_nume_acc_out2 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc2_add_temp(46) = '0') AND (s_nume_acc2_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc2_add_temp(46) = '1') AND (s_nume_acc2_add_temp(45) /= '1') ELSE
      s_nume_acc2_add_temp(45 DOWNTO 0);

  -- CSD Encoding (25361) : 0110001100010001; Cost (Adders) = 5
  nume_gain3_mul_temp <= ((((resize(s_state_out3_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62) + resize(s_state_out3_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) + resize(s_state_out3_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) + resize(s_state_out3_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) + resize(s_state_out3_1 & '0' & '0' & '0' & '0', 62)) + resize(s_state_out3_1, 62);
  
  s_nume_gain3 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain3_mul_temp(61) = '0') AND (nume_gain3_mul_temp(60) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain3_mul_temp(61) = '1') AND (nume_gain3_mul_temp(60) /= '1') ELSE
      nume_gain3_mul_temp(60 DOWNTO 15);

  s_nume_acc_cast3 <= resize(s_nume_gain3(45 DOWNTO 1), 46);

  s_nume_acc3_add_cast <= resize(s_nume_acc_out2, 47);
  s_nume_acc3_add_cast_1 <= resize(s_nume_acc_cast3, 47);
  s_nume_acc3_add_temp <= s_nume_acc3_add_cast + s_nume_acc3_add_cast_1;
  
  s_nume_acc_out3 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc3_add_temp(46) = '0') AND (s_nume_acc3_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc3_add_temp(46) = '1') AND (s_nume_acc3_add_temp(45) /= '1') ELSE
      s_nume_acc3_add_temp(45 DOWNTO 0);

  
  s_output_cast <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc_out3(45) = '0') AND (s_nume_acc_out3(44 DOWNTO 25) /= X"00000") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc_out3(45) = '1') AND (s_nume_acc_out3(44 DOWNTO 25) /= X"FFFFF") ELSE
      s_nume_acc_out3(25 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  Path_Delay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Path_Delay_1_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Path_Delay_1_out1 <= s_output_cast;
      END IF;
    END IF;
  END PROCESS Path_Delay_1_process;


  -- FCSD for 26202761468337 = 3 X 283 X 3041 X 10148993; Total Cost = 14
  -- CSD Encoding (3) : 011; Cost (Adders) = 1
  Gain5_factor <= resize(Path_Delay_1_out1 & '0', 92) + resize(Path_Delay_1_out1, 92);
  -- CSD Encoding (283) : 01001001'01'; Cost (Adders) = 3
  Gain5_factor_1 <= ((resize(Gain5_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Gain5_factor & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain5_factor & '0' & '0', 92)) - Gain5_factor;
  -- CSD Encoding (3041) : 01100001'00001; Cost (Adders) = 3
  Gain5_factor_2 <= ((resize(Gain5_factor_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Gain5_factor_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain5_factor_1 & '0' & '0' & '0' & '0' & '0', 92)) + Gain5_factor_1;
  -- CSD Encoding (10148993) : 0101001'01'001'001'0010000001; Cost (Adders) = 7
  Gain5_mul_temp <= ((((((resize(Gain5_factor_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Gain5_factor_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain5_factor_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain5_factor_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain5_factor_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain5_factor_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain5_factor_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + Gain5_factor_2;
  
  I4 <= "0111111111111111111111111111111111111111111111" WHEN (Gain5_mul_temp(91) = '0') AND (Gain5_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain5_mul_temp(91) = '1') AND (Gain5_mul_temp(90) /= '1') ELSE
      Gain5_mul_temp(90 DOWNTO 45);

  Gvar3_N_unsigned <= unsigned(Gvar3_N);

  Input_delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      alpha3 <= to_unsigned(16#00#, 5);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        alpha3 <= Gvar3_N_unsigned;
      END IF;
    END IF;
  END PROCESS Input_delay1_process;


  
  LUT_Gvar3_k <= to_unsigned(16#00#, 5) WHEN alpha3 = to_unsigned(16#00#, 5) ELSE
      to_unsigned(16#1F#, 5) WHEN alpha3 = to_unsigned(16#1F#, 5) ELSE
      alpha3;
  LUT_Gvar3_out1 <= LUT_Gvar3_data(to_integer(LUT_Gvar3_k));

  Mult_delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Mult_delay1_out1 <= to_signed(16#000000#, 22);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Mult_delay1_out1 <= LUT_Gvar3_out1;
      END IF;
    END IF;
  END PROCESS Mult_delay1_process;


  Gvar1_N_unsigned <= unsigned(Gvar1_N);

  Input_delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      alpha1 <= to_unsigned(16#00#, 5);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        alpha1 <= Gvar1_N_unsigned;
      END IF;
    END IF;
  END PROCESS Input_delay2_process;


  Gvar2_N_unsigned <= unsigned(Gvar2_N);

  Input_delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      alpha2 <= to_unsigned(16#00#, 5);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        alpha2 <= Gvar2_N_unsigned;
      END IF;
    END IF;
  END PROCESS Input_delay3_process;


  
  LUT_Gvar2_rev_k <= to_unsigned(16#00#, 5) WHEN alpha2 = to_unsigned(16#00#, 5) ELSE
      to_unsigned(16#1F#, 5) WHEN alpha2 = to_unsigned(16#1F#, 5) ELSE
      alpha2;
  LUT_Gvar2_rev_out1 <= LUT_Gvar2_rev_data(to_integer(LUT_Gvar2_rev_k));

  Mult_delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Mult_delay2_out1 <= to_signed(16#000000#, 22);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Mult_delay2_out1 <= LUT_Gvar2_rev_out1;
      END IF;
    END IF;
  END PROCESS Mult_delay2_process;


  
  LUT_Gvar1_k <= to_unsigned(16#00#, 5) WHEN alpha1 = to_unsigned(16#00#, 5) ELSE
      to_unsigned(16#1F#, 5) WHEN alpha1 = to_unsigned(16#1F#, 5) ELSE
      alpha1;
  LUT_Gvar1_out1 <= LUT_Gvar1_data(to_integer(LUT_Gvar1_k));

  Mult_delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Mult_delay3_out1 <= to_signed(16#000000#, 22);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Mult_delay3_out1 <= LUT_Gvar1_out1;
      END IF;
    END IF;
  END PROCESS Mult_delay3_process;


  Difference3_out1_signed <= signed(Difference3_out1);

  -- FCSD for 31665934879949 = 53 X 597470469433; Total Cost = 15
  -- CSD Encoding (53) : 0110101; Cost (Adders) = 3
  Gain13_factor <= ((resize(Difference3_out1_signed & '0' & '0' & '0' & '0' & '0', 92) + resize(Difference3_out1_signed & '0' & '0' & '0' & '0', 92)) + resize(Difference3_out1_signed & '0' & '0', 92)) + resize(Difference3_out1_signed, 92);
  -- CSD Encoding (597470469433) : 010001011001001'0000000100001'001'0101001'001; Cost (Adders) = 12
  Gain13_mul_temp <= (((((((((((resize(Gain13_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Gain13_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain13_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain13_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain13_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain13_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain13_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain13_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain13_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain13_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain13_factor & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain13_factor & '0' & '0' & '0', 92)) + Gain13_factor;
  
  I1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain13_mul_temp(91) = '0') AND (Gain13_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain13_mul_temp(91) = '1') AND (Gain13_mul_temp(90) /= '1') ELSE
      Gain13_mul_temp(90 DOWNTO 45);

  Gvar4_N_unsigned <= unsigned(Gvar4_N);

  Input_delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      alpha1_1 <= to_unsigned(16#00#, 8);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        alpha1_1 <= Gvar4_N_unsigned;
      END IF;
    END IF;
  END PROCESS Input_delay4_process;


  
  alpha1_D_Lookup_Table1_k <= to_unsigned(16#00#, 8) WHEN alpha1_1 = to_unsigned(16#00#, 8) ELSE
      to_unsigned(16#FF#, 8) WHEN alpha1_1 = to_unsigned(16#FF#, 8) ELSE
      alpha1_1;
  alpha1_D_Lookup_Table1_out1 <= alpha1_D_Lookup_Table1_data(to_integer(alpha1_D_Lookup_Table1_k));

  Input_delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      in_rsvd <= to_unsigned(16#01#, 5);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        in_rsvd <= alpha1_D_Lookup_Table1_out1;
      END IF;
    END IF;
  END PROCESS Input_delay5_process;


  Constant8_out1 <= to_unsigned(16#01#, 5);

  Constant14_out1 <= to_unsigned(16#00#, 5);

  Sum1_out1 <= Constant8_out1 + out_rsvd;

  
  Relational_Operator7_relop1 <= '1' WHEN out_rsvd <= in_rsvd ELSE
      '0';

  
  switch_compare_1 <= '1' WHEN Relational_Operator7_relop1 > '0' ELSE
      '0';

  
  Switch4_out1 <= out_rsvd WHEN switch_compare_1 = '0' ELSE
      Sum1_out1;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay3_out1 <= to_unsigned(16#00#, 5);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay3_out1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Relational_Operator4_relop1 <= '1' WHEN Delay3_out1 > in_rsvd ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN Relational_Operator4_relop1 > '0' ELSE
      '0';

  
  out_rsvd <= Delay3_out1 WHEN switch_compare_1_1 = '0' ELSE
      Constant14_out1;

  
  Compare_To_Zero2_out1 <= '1' WHEN out_rsvd = to_unsigned(16#00#, 5) ELSE
      '0';

  -- CSD Encoding (31863) : 100001'0010001'001'; Cost (Adders) = 4
  nume_gain113_mul_temp <= (((resize(s_state_out1_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62) - resize(s_state_out1_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) + resize(s_state_out1_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) - resize(s_state_out1_2 & '0' & '0' & '0', 62)) - resize(s_state_out1_2, 62);
  
  s_nume_gain1_1 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain113_mul_temp(61) = '0') AND (nume_gain113_mul_temp(60) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain113_mul_temp(61) = '1') AND (nume_gain113_mul_temp(60) /= '1') ELSE
      nume_gain113_mul_temp(60 DOWNTO 15);

  s_nume_acc_cast1_1 <= resize(s_nume_gain1_1(45 DOWNTO 1), 46);

  s_state_out113_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_2 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_2 <= s_denom_acc_out1_1;
      END IF;
    END IF;
  END PROCESS s_state_out113_process;


  -- CSD Encoding (31835) : 100001'00011001'01'; Cost (Adders) = 5
  denom_gain113_mul_temp <=  - (((((resize(s_state_out1_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) - resize(s_state_out1_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_2 & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_2 & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_2 & '0' & '0', 63)) - resize(s_state_out1_2, 63));
  
  s_denom_gain1_1 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain113_mul_temp(62) = '0') AND (denom_gain113_mul_temp(61 DOWNTO 60) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain113_mul_temp(62) = '1') AND (denom_gain113_mul_temp(61 DOWNTO 60) /= "11") ELSE
      denom_gain113_mul_temp(60 DOWNTO 15);

  -- FCSD for 2439 = 9 X 271; Total Cost = 3
  -- CSD Encoding (9) : 01001; Cost (Adders) = 1
  nume_gain18_factor <= resize(s_state_out1_3 & '0' & '0' & '0', 59) + resize(s_state_out1_3, 59);
  -- CSD Encoding (271) : 0100010001'; Cost (Adders) = 2
  nume_gain18_mul_temp <= (resize(nume_gain18_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 59) + resize(nume_gain18_factor & '0' & '0' & '0' & '0', 59)) - nume_gain18_factor;
  
  s_nume_gain1_2 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain18_mul_temp(58) = '0') AND (nume_gain18_mul_temp(57 DOWNTO 56) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain18_mul_temp(58) = '1') AND (nume_gain18_mul_temp(57 DOWNTO 56) /= "11") ELSE
      nume_gain18_mul_temp(56 DOWNTO 11);

  s_nume_acc_cast1_2 <= resize(s_nume_gain1_2(45 DOWNTO 1), 46);

  s_state_out18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_3 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_3 <= s_denom_acc_out1_2;
      END IF;
    END IF;
  END PROCESS s_state_out18_process;


  -- CSD Encoding (3097) : 0110000011001; Cost (Adders) = 4
  denom_gain18_mul_temp <=  - ((((resize(s_state_out1_3 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 60) + resize(s_state_out1_3 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 60)) + resize(s_state_out1_3 & '0' & '0' & '0' & '0', 60)) + resize(s_state_out1_3 & '0' & '0' & '0', 60)) + resize(s_state_out1_3, 60));
  
  s_denom_gain1_2 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain18_mul_temp(59) = '0') AND (denom_gain18_mul_temp(58 DOWNTO 56) /= "000") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain18_mul_temp(59) = '1') AND (denom_gain18_mul_temp(58 DOWNTO 56) /= "111") ELSE
      denom_gain18_mul_temp(56 DOWNTO 11);

  s_denom_acc_cast1 <= resize(s_denom_gain1_2(45 DOWNTO 1), 46);

  -- CSD Encoding (36409) : 01001001'001001'001; Cost (Adders) = 5
  nume_gain19_mul_temp <= ((((resize(s_state_out1_4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) + resize(s_state_out1_4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_4 & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_4 & '0' & '0' & '0', 63)) + resize(s_state_out1_4, 63);
  
  s_nume_gain1_3 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain19_mul_temp(62) = '0') AND (nume_gain19_mul_temp(61 DOWNTO 60) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain19_mul_temp(62) = '1') AND (nume_gain19_mul_temp(61 DOWNTO 60) /= "11") ELSE
      nume_gain19_mul_temp(60 DOWNTO 15);

  s_nume_acc_cast1_3 <= resize(s_nume_gain1_3(45 DOWNTO 1), 46);

  s_state_out19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_4 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_4 <= s_denom_acc_out1_3;
      END IF;
    END IF;
  END PROCESS s_state_out19_process;


  -- CSD Encoding (65535) : 10000000000000001'; Cost (Adders) = 1
  denom_gain19_mul_temp <=  - (resize(s_state_out1_4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) - resize(s_state_out1_4, 64));
  
  s_denom_gain1_3 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain19_mul_temp(63) = '0') AND (denom_gain19_mul_temp(62 DOWNTO 61) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain19_mul_temp(63) = '1') AND (denom_gain19_mul_temp(62 DOWNTO 61) /= "11") ELSE
      denom_gain19_mul_temp(61 DOWNTO 16);

  -- CSD Encoding (72095) : 010001100110100001'; Cost (Adders) = 6
  nume_gain110_mul_temp <= (((((resize(s_state_out1_5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) + resize(s_state_out1_5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_state_out1_5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_state_out1_5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_state_out1_5 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_state_out1_5 & '0' & '0' & '0' & '0' & '0', 64)) - resize(s_state_out1_5, 64);
  
  s_nume_gain1_4 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain110_mul_temp(63) = '0') AND (nume_gain110_mul_temp(62 DOWNTO 61) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain110_mul_temp(63) = '1') AND (nume_gain110_mul_temp(62 DOWNTO 61) /= "11") ELSE
      nume_gain110_mul_temp(61 DOWNTO 16);

  s_nume_acc_cast1_4 <= resize(s_nume_gain1_4(45 DOWNTO 1), 46);

  s_state_out110_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_5 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_5 <= s_denom_acc_out1_4;
      END IF;
    END IF;
  END PROCESS s_state_out110_process;


  -- CSD Encoding (65533) : 100000000000001'01; Cost (Adders) = 2
  denom_gain110_mul_temp <=  - ((resize(s_state_out1_5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) - resize(s_state_out1_5 & '0' & '0', 64)) + resize(s_state_out1_5, 64));
  
  s_denom_gain1_4 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain110_mul_temp(63) = '0') AND (denom_gain110_mul_temp(62 DOWNTO 61) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain110_mul_temp(63) = '1') AND (denom_gain110_mul_temp(62 DOWNTO 61) /= "11") ELSE
      denom_gain110_mul_temp(61 DOWNTO 16);

  -- CSD Encoding (35351) : 01000101000011001'; Cost (Adders) = 5
  nume_gain14_mul_temp <= ((((resize(s_state_out1_6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) + resize(s_state_out1_6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_6 & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_6 & '0' & '0' & '0', 63)) - resize(s_state_out1_6, 63);
  
  s_nume_gain1_5 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain14_mul_temp(62) = '0') AND (nume_gain14_mul_temp(61) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain14_mul_temp(62) = '1') AND (nume_gain14_mul_temp(61) /= '1') ELSE
      nume_gain14_mul_temp(61 DOWNTO 16);

  s_nume_acc_cast1_5 <= resize(s_nume_gain1_5(45 DOWNTO 1), 46);

  s_state_out14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_6 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_6 <= s_denom_acc_out1_5;
      END IF;
    END IF;
  END PROCESS s_state_out14_process;


  -- CSD Encoding (32391) : 1000001'010001001'; Cost (Adders) = 4
  denom_gain14_mul_temp <=  - ((((resize(s_state_out1_6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) - resize(s_state_out1_6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_6 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_6 & '0' & '0' & '0', 63)) - resize(s_state_out1_6, 63));
  
  s_denom_gain1_5 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain14_mul_temp(62) = '0') AND (denom_gain14_mul_temp(61 DOWNTO 60) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain14_mul_temp(62) = '1') AND (denom_gain14_mul_temp(61 DOWNTO 60) /= "11") ELSE
      denom_gain14_mul_temp(60 DOWNTO 15);

  -- CSD Encoding (56805) : 1001'0001'0001'00101; Cost (Adders) = 5
  nume_gain111_mul_temp <= ((((resize(s_state_out1_7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) - resize(s_state_out1_7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_7 & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_7 & '0' & '0', 63)) + resize(s_state_out1_7, 63);
  
  s_nume_gain1_6 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain111_mul_temp(62) = '0') AND (nume_gain111_mul_temp(61) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain111_mul_temp(62) = '1') AND (nume_gain111_mul_temp(61) /= '1') ELSE
      nume_gain111_mul_temp(61 DOWNTO 16);

  s_nume_acc_cast1_6 <= resize(s_nume_gain1_6(45 DOWNTO 1), 46);

  s_state_out111_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_7 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_7 <= s_denom_acc_out1_6;
      END IF;
    END IF;
  END PROCESS s_state_out111_process;


  -- CSD Encoding (65343) : 100000001'01000001'; Cost (Adders) = 3
  denom_gain111_mul_temp <=  - (((resize(s_state_out1_7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) - resize(s_state_out1_7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_state_out1_7 & '0' & '0' & '0' & '0' & '0' & '0', 64)) - resize(s_state_out1_7, 64));
  
  s_denom_gain1_6 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain111_mul_temp(63) = '0') AND (denom_gain111_mul_temp(62 DOWNTO 61) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain111_mul_temp(63) = '1') AND (denom_gain111_mul_temp(62 DOWNTO 61) /= "11") ELSE
      denom_gain111_mul_temp(61 DOWNTO 16);

  -- CSD Encoding (56823) : 1001'0001'000001'001'; Cost (Adders) = 4
  nume_gain112_mul_temp <= (((resize(s_state_out1_8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) - resize(s_state_out1_8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_8 & '0' & '0' & '0', 63)) - resize(s_state_out1_8, 63);
  
  s_nume_gain1_7 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain112_mul_temp(62) = '0') AND (nume_gain112_mul_temp(61) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain112_mul_temp(62) = '1') AND (nume_gain112_mul_temp(61) /= '1') ELSE
      nume_gain112_mul_temp(61 DOWNTO 16);

  s_nume_acc_cast1_7 <= resize(s_nume_gain1_7(45 DOWNTO 1), 46);

  s_state_out112_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_8 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_8 <= s_denom_acc_out1_7;
      END IF;
    END IF;
  END PROCESS s_state_out112_process;


  -- CSD Encoding (8173) : 1000000001'01'01; Cost (Adders) = 3
  denom_gain112_mul_temp <=  - (((resize(s_state_out1_8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 61) - resize(s_state_out1_8 & '0' & '0' & '0' & '0', 61)) - resize(s_state_out1_8 & '0' & '0', 61)) + resize(s_state_out1_8, 61));
  
  s_denom_gain1_7 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain112_mul_temp(60) = '0') AND (denom_gain112_mul_temp(59 DOWNTO 58) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain112_mul_temp(60) = '1') AND (denom_gain112_mul_temp(59 DOWNTO 58) /= "11") ELSE
      denom_gain112_mul_temp(58 DOWNTO 13);

  -- CSD Encoding (33457) : 01000001010110001; Cost (Adders) = 5
  nume_gain13_mul_temp <= ((((resize(s_state_out1_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) + resize(s_state_out1_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_9 & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_9 & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_9, 63);
  
  s_nume_gain1_8 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain13_mul_temp(62) = '0') AND (nume_gain13_mul_temp(61 DOWNTO 60) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain13_mul_temp(62) = '1') AND (nume_gain13_mul_temp(61 DOWNTO 60) /= "11") ELSE
      nume_gain13_mul_temp(60 DOWNTO 15);

  s_nume_acc_cast1_8 <= resize(s_nume_gain1_8(45 DOWNTO 1), 46);

  s_state_out13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_9 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_9 <= s_denom_acc_out1_8;
      END IF;
    END IF;
  END PROCESS s_state_out13_process;


  -- CSD Encoding (16377) : 100000000001'001; Cost (Adders) = 2
  denom_gain13_mul_temp <=  - ((resize(s_state_out1_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62) - resize(s_state_out1_9 & '0' & '0' & '0', 62)) + resize(s_state_out1_9, 62));
  
  s_denom_gain1_8 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain13_mul_temp(61) = '0') AND (denom_gain13_mul_temp(60 DOWNTO 59) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain13_mul_temp(61) = '1') AND (denom_gain13_mul_temp(60 DOWNTO 59) /= "11") ELSE
      denom_gain13_mul_temp(59 DOWNTO 14);

  Difference5_out1_signed <= signed(Difference5_out1);

  -- CSD Encoding (34452537149384) : 1000001'01'01'01'01'01001'01'010001'010000100001'001000; Cost (Adders) = 14
  Gain44_mul_temp <= (((((((((((((resize(Difference5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) - resize(Difference5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference5_out1_signed & '0' & '0' & '0', 92);
  
  I11 <= "0111111111111111111111111111111111111111111111" WHEN (Gain44_mul_temp(91) = '0') AND (Gain44_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain44_mul_temp(91) = '1') AND (Gain44_mul_temp(90) /= '1') ELSE
      Gain44_mul_temp(90 DOWNTO 45);

  -- CSD Encoding (30662805973586) : 1001'00001'000110100001'01'01010000110101001010010; Cost (Adders) = 16
  Gain53_mul_temp <= (((((((((((((((resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) - resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0', 92);
  
  I2 <= "0111111111111111111111111111111111111111111111" WHEN (Gain53_mul_temp(91) = '0') AND (Gain53_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain53_mul_temp(91) = '1') AND (Gain53_mul_temp(90) /= '1') ELSE
      Gain53_mul_temp(90 DOWNTO 45);

  Sum23_add_cast <= resize(I2, 48);
  Sum23_add_cast_1 <= resize(I11 & '0', 48);
  Sum23_add_temp <= Sum23_add_cast + Sum23_add_cast_1;
  
  Sum23_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Sum23_add_temp(47) = '0') AND (Sum23_add_temp(46 DOWNTO 45) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum23_add_temp(47) = '1') AND (Sum23_add_temp(46 DOWNTO 45) /= "11") ELSE
      Sum23_add_temp(45 DOWNTO 0);

  Path_Delay_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Path_Delay_3_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Path_Delay_3_out1 <= V15;
      END IF;
    END IF;
  END PROCESS Path_Delay_3_process;


  -- CSD Encoding (15169) : 10001'01'01000001; Cost (Adders) = 4
  nume_gain12_mul_temp <= (((resize(s_state_out1_10 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 61) - resize(s_state_out1_10 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 61)) - resize(s_state_out1_10 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 61)) + resize(s_state_out1_10 & '0' & '0' & '0' & '0' & '0' & '0', 61)) + resize(s_state_out1_10, 61);
  
  s_nume_gain1_9 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain12_mul_temp(60) = '0') AND (nume_gain12_mul_temp(59 DOWNTO 58) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain12_mul_temp(60) = '1') AND (nume_gain12_mul_temp(59 DOWNTO 58) /= "11") ELSE
      nume_gain12_mul_temp(58 DOWNTO 13);

  s_nume_acc_cast1_9 <= resize(s_nume_gain1_9(45 DOWNTO 1), 46);

  s_state_out12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_10 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_10 <= s_denom_acc_out1_9;
      END IF;
    END IF;
  END PROCESS s_state_out12_process;


  -- CSD Encoding (65523) : 1000000000001'0011; Cost (Adders) = 3
  denom_gain12_mul_temp <=  - (((resize(s_state_out1_10 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) - resize(s_state_out1_10 & '0' & '0' & '0' & '0', 64)) + resize(s_state_out1_10 & '0', 64)) + resize(s_state_out1_10, 64));
  
  s_denom_gain1_9 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain12_mul_temp(63) = '0') AND (denom_gain12_mul_temp(62 DOWNTO 61) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain12_mul_temp(63) = '1') AND (denom_gain12_mul_temp(62 DOWNTO 61) /= "11") ELSE
      denom_gain12_mul_temp(61 DOWNTO 16);

  Comparator_Logic_out1_signed <= signed(Comparator_Logic_out1);

  -- CSD Encoding (30662805973586) : 1001'00001'000110100001'01'01010000110101001010010; Cost (Adders) = 16
  Gain55_mul_temp <= (((((((((((((((resize(V9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) - resize(V9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V9 & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V9 & '0' & '0' & '0' & '0', 92)) + resize(V9 & '0', 92);
  
  I2_1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain55_mul_temp(91) = '0') AND (Gain55_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain55_mul_temp(91) = '1') AND (Gain55_mul_temp(90) /= '1') ELSE
      Gain55_mul_temp(90 DOWNTO 45);

  Difference6_out1_signed <= signed(Difference6_out1);

  -- CSD Encoding (18999560927969) : 0100010100100001'01'001'000010100100001'01'001'00001; Cost (Adders) = 13
  Gain45_mul_temp <= ((((((((((((resize(Difference6_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Difference6_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference6_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference6_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference6_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference6_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference6_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference6_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference6_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference6_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference6_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference6_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference6_out1_signed & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference6_out1_signed, 92);
  
  I10 <= "0111111111111111111111111111111111111111111111" WHEN (Gain45_mul_temp(91) = '0') AND (Gain45_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain45_mul_temp(91) = '1') AND (Gain45_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain45_mul_temp(89 DOWNTO 44);

  Sum24_add_cast <= resize(I10 & '0', 48);
  Sum24_add_cast_1 <= resize(I2_1, 48);
  Sum24_add_temp <= Sum24_add_cast + Sum24_add_cast_1;
  
  I10_1 <= "0111111111111111111111111111111111111111111111" WHEN (Sum24_add_temp(47) = '0') AND (Sum24_add_temp(46 DOWNTO 45) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum24_add_temp(47) = '1') AND (Sum24_add_temp(46 DOWNTO 45) /= "11") ELSE
      Sum24_add_temp(45 DOWNTO 0);

  Sum25_add_cast <= resize(I10_1, 47);
  Sum25_add_cast_1 <= resize(Comparator_Logic_out1_signed, 47);
  Sum25_add_temp <= Sum25_add_cast + Sum25_add_cast_1;
  I10_2 <= Sum25_add_temp(46 DOWNTO 1);

  Delay_Mod4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay_Mod4_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay_Mod4_out1 <= I10_2;
      END IF;
    END IF;
  END PROCESS Delay_Mod4_process;


  s_input_acc_cast_1 <= resize(Delay_Mod4_out1(45 DOWNTO 11), 46);

  denom_acc12_sub_cast <= resize(s_input_acc_cast_1, 47);
  denom_acc12_sub_cast_1 <= resize(s_denom_gain1_9, 47);
  denom_acc12_sub_temp <= denom_acc12_sub_cast - denom_acc12_sub_cast_1;
  
  s_denom_acc_out1_9 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc12_sub_temp(46) = '0') AND (denom_acc12_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc12_sub_temp(46) = '1') AND (denom_acc12_sub_temp(45) /= '1') ELSE
      denom_acc12_sub_temp(45 DOWNTO 0);

  -- CSD Encoding (15169) : 10001'01'01000001; Cost (Adders) = 4
  nume_gain_b02_mul_temp <= (((resize(s_denom_acc_out1_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 61) - resize(s_denom_acc_out1_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 61)) - resize(s_denom_acc_out1_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 61)) + resize(s_denom_acc_out1_9 & '0' & '0' & '0' & '0' & '0' & '0', 61)) + resize(s_denom_acc_out1_9, 61);
  
  s_nume_gain_b0_1 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b02_mul_temp(60) = '0') AND (nume_gain_b02_mul_temp(59 DOWNTO 58) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b02_mul_temp(60) = '1') AND (nume_gain_b02_mul_temp(59 DOWNTO 58) /= "11") ELSE
      nume_gain_b02_mul_temp(58 DOWNTO 13);

  s_nume_gain_b0_cast_1 <= resize(s_nume_gain_b0_1(45 DOWNTO 1), 46);

  s_nume_acc12_add_cast <= resize(s_nume_gain_b0_cast_1, 47);
  s_nume_acc12_add_cast_1 <= resize(s_nume_acc_cast1_9, 47);
  s_nume_acc12_add_temp <= s_nume_acc12_add_cast + s_nume_acc12_add_cast_1;
  
  s_nume_acc_out1_1 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc12_add_temp(46) = '0') AND (s_nume_acc12_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc12_add_temp(46) = '1') AND (s_nume_acc12_add_temp(45) /= '1') ELSE
      s_nume_acc12_add_temp(45 DOWNTO 0);

  V10 <= s_nume_acc_out1_1;

  Gain51_cast <= resize(V10, 47);
  Gain51_cast_1 <=  - (Gain51_cast);
  Gain51_cast_2 <= Gain51_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  
  Gain51_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain51_cast_2(91) = '0') AND (Gain51_cast_2(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain51_cast_2(91) = '1') AND (Gain51_cast_2(90) /= '1') ELSE
      Gain51_cast_2(90 DOWNTO 45);

  Discrete_Time_Integrator5_indtc <= Gain51_out1;

  gain3_mul_temp <= signed'("0001000111000111000111000111000111000111000111") * Discrete_Time_Integrator5_indtc;
  Discrete_Time_Integrator5_u_gain <= resize(gain3_mul_temp(91 DOWNTO 47), 46);

  Discrete_Time_Integrator5_u_dtc <= Discrete_Time_Integrator5_u_gain;

  adder7_add_cast <= resize(V9, 47);
  adder7_add_cast_1 <= resize(Discrete_Time_Integrator5_u_dtc, 47);
  adder7_add_temp <= adder7_add_cast + adder7_add_cast_1;
  
  Discrete_Time_Integrator5_y_add <= "0111111111111111111111111111111111111111111111" WHEN (adder7_add_temp(46) = '0') AND (adder7_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (adder7_add_temp(46) = '1') AND (adder7_add_temp(45) /= '1') ELSE
      adder7_add_temp(45 DOWNTO 0);

  
  Discrete_Time_Integrator5_y_sat <= signed'("0001010000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator5_y_add > signed'("0001010000000000000000000000000000000000000000") ELSE
      signed'("1110110000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator5_y_add < signed'("1110110000000000000000000000000000000000000000") ELSE
      Discrete_Time_Integrator5_y_add;

  Discrete_Time_Integrator5_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Discrete_Time_Integrator5_x_reg <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Discrete_Time_Integrator5_x_reg <= Discrete_Time_Integrator5_y_sat;
      END IF;
    END IF;
  END PROCESS Discrete_Time_Integrator5_reg_process;


  adder6_add_cast <= resize(Discrete_Time_Integrator5_x_reg, 47);
  adder6_add_cast_1 <= resize(Discrete_Time_Integrator5_u_dtc, 47);
  adder6_add_temp <= adder6_add_cast + adder6_add_cast_1;
  
  Discrete_Time_Integrator5_x_add <= "0111111111111111111111111111111111111111111111" WHEN (adder6_add_temp(46) = '0') AND (adder6_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (adder6_add_temp(46) = '1') AND (adder6_add_temp(45) /= '1') ELSE
      adder6_add_temp(45 DOWNTO 0);

  
  V9 <= signed'("0001010000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator5_x_add > signed'("0001010000000000000000000000000000000000000000") ELSE
      signed'("1110110000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator5_x_add < signed'("1110110000000000000000000000000000000000000000") ELSE
      Discrete_Time_Integrator5_x_add;

  I11_signed <= signed(I11_1);

  Sum22_add_cast <= resize(I11_signed, 47);
  Sum22_add_cast_1 <= resize(Sum23_out1, 47);
  Sum22_add_temp <= Sum22_add_cast + Sum22_add_cast_1;
  I11_2 <= Sum22_add_temp(46 DOWNTO 1);

  Delay_Mod3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay_Mod3_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay_Mod3_out1 <= I11_2;
      END IF;
    END IF;
  END PROCESS Delay_Mod3_process;


  s_input_acc_cast_2 <= resize(Delay_Mod3_out1(45 DOWNTO 10), 46);

  denom_acc13_sub_cast <= resize(s_input_acc_cast_2, 47);
  denom_acc13_sub_cast_1 <= resize(s_denom_gain1_8, 47);
  denom_acc13_sub_temp <= denom_acc13_sub_cast - denom_acc13_sub_cast_1;
  
  s_denom_acc_out1_8 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc13_sub_temp(46) = '0') AND (denom_acc13_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc13_sub_temp(46) = '1') AND (denom_acc13_sub_temp(45) /= '1') ELSE
      denom_acc13_sub_temp(45 DOWNTO 0);

  -- CSD Encoding (33457) : 01000001010110001; Cost (Adders) = 5
  nume_gain_b03_mul_temp <= ((((resize(s_denom_acc_out1_8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) + resize(s_denom_acc_out1_8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_denom_acc_out1_8 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_denom_acc_out1_8 & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_denom_acc_out1_8 & '0' & '0' & '0' & '0', 63)) + resize(s_denom_acc_out1_8, 63);
  
  s_nume_gain_b0_2 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b03_mul_temp(62) = '0') AND (nume_gain_b03_mul_temp(61 DOWNTO 60) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b03_mul_temp(62) = '1') AND (nume_gain_b03_mul_temp(61 DOWNTO 60) /= "11") ELSE
      nume_gain_b03_mul_temp(60 DOWNTO 15);

  s_nume_gain_b0_cast_2 <= resize(s_nume_gain_b0_2(45 DOWNTO 1), 46);

  s_nume_acc13_add_cast <= resize(s_nume_gain_b0_cast_2, 47);
  s_nume_acc13_add_cast_1 <= resize(s_nume_acc_cast1_8, 47);
  s_nume_acc13_add_temp <= s_nume_acc13_add_cast + s_nume_acc13_add_cast_1;
  
  s_nume_acc_out1_2 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc13_add_temp(46) = '0') AND (s_nume_acc13_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc13_add_temp(46) = '1') AND (s_nume_acc13_add_temp(45) /= '1') ELSE
      s_nume_acc13_add_temp(45 DOWNTO 0);

  V11 <= s_nume_acc_out1_2;

  Gain52_cast <= resize(V11, 47);
  Gain52_cast_1 <=  - (Gain52_cast);
  Gain52_cast_2 <= Gain52_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  
  Gain52_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain52_cast_2(91) = '0') AND (Gain52_cast_2(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain52_cast_2(91) = '1') AND (Gain52_cast_2(90) /= '1') ELSE
      Gain52_cast_2(90 DOWNTO 45);

  Discrete_Time_Integrator6_indtc <= Gain52_out1;

  gain4_mul_temp <= signed'("0001000111000111000111000111000111000111000111") * Discrete_Time_Integrator6_indtc;
  Discrete_Time_Integrator6_u_gain <= gain4_mul_temp(91 DOWNTO 46);

  Discrete_Time_Integrator6_u_dtc <= Discrete_Time_Integrator6_u_gain;

  adder9_add_cast <= resize(V12, 47);
  adder9_add_cast_1 <= resize(Discrete_Time_Integrator6_u_dtc, 47);
  adder9_add_temp <= adder9_add_cast + adder9_add_cast_1;
  
  Discrete_Time_Integrator6_y_add <= "0111111111111111111111111111111111111111111111" WHEN (adder9_add_temp(46) = '0') AND (adder9_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (adder9_add_temp(46) = '1') AND (adder9_add_temp(45) /= '1') ELSE
      adder9_add_temp(45 DOWNTO 0);

  
  Discrete_Time_Integrator6_y_sat <= signed'("0001010000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator6_y_add > signed'("0001010000000000000000000000000000000000000000") ELSE
      signed'("1110110000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator6_y_add < signed'("1110110000000000000000000000000000000000000000") ELSE
      Discrete_Time_Integrator6_y_add;

  Discrete_Time_Integrator6_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Discrete_Time_Integrator6_x_reg <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Discrete_Time_Integrator6_x_reg <= Discrete_Time_Integrator6_y_sat;
      END IF;
    END IF;
  END PROCESS Discrete_Time_Integrator6_reg_process;


  adder8_add_cast <= resize(Discrete_Time_Integrator6_x_reg, 47);
  adder8_add_cast_1 <= resize(Discrete_Time_Integrator6_u_dtc, 47);
  adder8_add_temp <= adder8_add_cast + adder8_add_cast_1;
  
  Discrete_Time_Integrator6_x_add <= "0111111111111111111111111111111111111111111111" WHEN (adder8_add_temp(46) = '0') AND (adder8_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (adder8_add_temp(46) = '1') AND (adder8_add_temp(45) /= '1') ELSE
      adder8_add_temp(45 DOWNTO 0);

  
  V12 <= signed'("0001010000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator6_x_add > signed'("0001010000000000000000000000000000000000000000") ELSE
      signed'("1110110000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator6_x_add < signed'("1110110000000000000000000000000000000000000000") ELSE
      Discrete_Time_Integrator6_x_add;

  -- CSD Encoding (24019198012643) : 010110001'01'0000110100001'0001000001'01'01001'00011; Cost (Adders) = 15
  Gain59_mul_temp <= ((((((((((((((resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V12 & '0' & '0' & '0' & '0' & '0', 92)) + resize(V12 & '0', 92)) + resize(V12, 92);
  
  I30 <= "0111111111111111111111111111111111111111111111" WHEN (Gain59_mul_temp(91) = '0') AND (Gain59_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain59_mul_temp(91) = '1') AND (Gain59_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain59_mul_temp(89 DOWNTO 44);

  Path_Delay_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Path_Delay_4_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Path_Delay_4_out1 <= I30;
      END IF;
    END IF;
  END PROCESS Path_Delay_4_process;


  -- CSD Encoding (24019198012643) : 010110001'01'0000110100001'0001000001'01'01001'00011; Cost (Adders) = 15
  Gain48_mul_temp <= ((((((((((((((resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V29 & '0' & '0' & '0' & '0' & '0', 92)) + resize(V29 & '0', 92)) + resize(V29, 92);
  
  I30_1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain48_mul_temp(91) = '0') AND (Gain48_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain48_mul_temp(91) = '1') AND (Gain48_mul_temp(90) /= '1') ELSE
      Gain48_mul_temp(90 DOWNTO 45);

  Sum21_add_cast <= resize(I30_1, 50);
  Sum21_add_cast_1 <= resize(Path_Delay_4_out1 & '0' & '0' & '0', 50);
  Sum21_add_temp <= Sum21_add_cast + Sum21_add_cast_1;
  
  I30_2 <= "0111111111111111111111111111111111111111111111" WHEN (Sum21_add_temp(49) = '0') AND (Sum21_add_temp(48) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum21_add_temp(49) = '1') AND (Sum21_add_temp(48) /= '1') ELSE
      Sum21_add_temp(48 DOWNTO 3);

  s_input_acc_cast_3 <= resize(I30_2(45 DOWNTO 9), 46);

  denom_acc112_sub_cast <= resize(s_input_acc_cast_3, 47);
  denom_acc112_sub_cast_1 <= resize(s_denom_gain1_7, 47);
  denom_acc112_sub_temp <= denom_acc112_sub_cast - denom_acc112_sub_cast_1;
  
  s_denom_acc_out1_7 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc112_sub_temp(46) = '0') AND (denom_acc112_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc112_sub_temp(46) = '1') AND (denom_acc112_sub_temp(45) /= '1') ELSE
      denom_acc112_sub_temp(45 DOWNTO 0);

  -- CSD Encoding (56823) : 1001'0001'000001'001'; Cost (Adders) = 4
  nume_gain_b012_mul_temp <= (((resize(s_denom_acc_out1_7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) - resize(s_denom_acc_out1_7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_7 & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_7, 63);
  
  s_nume_gain_b0_3 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b012_mul_temp(62) = '0') AND (nume_gain_b012_mul_temp(61) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b012_mul_temp(62) = '1') AND (nume_gain_b012_mul_temp(61) /= '1') ELSE
      nume_gain_b012_mul_temp(61 DOWNTO 16);

  s_nume_gain_b0_cast_3 <= resize(s_nume_gain_b0_3(45 DOWNTO 1), 46);

  s_nume_acc112_add_cast <= resize(s_nume_gain_b0_cast_3, 47);
  s_nume_acc112_add_cast_1 <= resize(s_nume_acc_cast1_7, 47);
  s_nume_acc112_add_temp <= s_nume_acc112_add_cast + s_nume_acc112_add_cast_1;
  
  s_nume_acc_out1_3 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc112_add_temp(46) = '0') AND (s_nume_acc112_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc112_add_temp(46) = '1') AND (s_nume_acc112_add_temp(45) /= '1') ELSE
      s_nume_acc112_add_temp(45 DOWNTO 0);

  V30 <= s_nume_acc_out1_3;

  -- CSD Encoding (24019198012643) : 010110001'01'0000110100001'0001000001'01'01001'00011; Cost (Adders) = 15
  Gain47_mul_temp <= ((((((((((((((resize(V30 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V30 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V30 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V30 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V30 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V30 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V30 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V30 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V30 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V30 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V30 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V30 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V30 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V30 & '0' & '0' & '0' & '0' & '0', 92)) + resize(V30 & '0', 92)) + resize(V30, 92);
  
  Gain47_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain47_mul_temp(91) = '0') AND (Gain47_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain47_mul_temp(91) = '1') AND (Gain47_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain47_mul_temp(89 DOWNTO 44);

  -- FCSD for 26202761468337 = 3 X 283 X 3041 X 10148993; Total Cost = 14
  -- CSD Encoding (3) : 011; Cost (Adders) = 1
  Gain50_factor <= resize(V14 & '0', 92) + resize(V14, 92);
  -- CSD Encoding (283) : 01001001'01'; Cost (Adders) = 3
  Gain50_factor_1 <= ((resize(Gain50_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Gain50_factor & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain50_factor & '0' & '0', 92)) - Gain50_factor;
  -- CSD Encoding (3041) : 01100001'00001; Cost (Adders) = 3
  Gain50_factor_2 <= ((resize(Gain50_factor_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Gain50_factor_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain50_factor_1 & '0' & '0' & '0' & '0' & '0', 92)) + Gain50_factor_1;
  -- CSD Encoding (10148993) : 0101001'01'001'001'0010000001; Cost (Adders) = 7
  Gain50_mul_temp <= ((((((resize(Gain50_factor_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Gain50_factor_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain50_factor_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain50_factor_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain50_factor_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain50_factor_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain50_factor_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + Gain50_factor_2;
  
  I29 <= "0111111111111111111111111111111111111111111111" WHEN (Gain50_mul_temp(91) = '0') AND (Gain50_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain50_mul_temp(91) = '1') AND (Gain50_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain50_mul_temp(89 DOWNTO 44);

  -- CSD Encoding (24019198012643) : 010110001'01'0000110100001'0001000001'01'01001'00011; Cost (Adders) = 15
  Gain49_mul_temp <= ((((((((((((((resize(V13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V13 & '0' & '0' & '0' & '0' & '0', 92)) + resize(V13 & '0', 92)) + resize(V13, 92);
  
  I29_1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain49_mul_temp(91) = '0') AND (Gain49_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain49_mul_temp(91) = '1') AND (Gain49_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain49_mul_temp(89 DOWNTO 44);

  Sum20_stage2_add_cast <= resize(I29_1, 54);
  Sum20_stage2_add_cast_1 <= resize(I29 & '0' & '0' & '0' & '0' & '0' & '0', 54);
  Sum20_stage2_add_temp <= Sum20_stage2_add_cast + Sum20_stage2_add_cast_1;
  
  Sum20_op_stage1 <= "01111111111111111111111111111111111111111111111111111" WHEN (Sum20_stage2_add_temp(53) = '0') AND (Sum20_stage2_add_temp(52) /= '0') ELSE
      "10000000000000000000000000000000000000000000000000000" WHEN (Sum20_stage2_add_temp(53) = '1') AND (Sum20_stage2_add_temp(52) /= '1') ELSE
      Sum20_stage2_add_temp(52 DOWNTO 0);

  Sum20_stage3_add_cast <= resize(Sum20_op_stage1, 54);
  Sum20_stage3_add_cast_1 <= resize(Gain47_out1 & '0' & '0' & '0' & '0' & '0' & '0', 54);
  Sum20_stage3_add_temp <= Sum20_stage3_add_cast + Sum20_stage3_add_cast_1;
  
  I29_2 <= "0111111111111111111111111111111111111111111111" WHEN (Sum20_stage3_add_temp(53) = '0') AND (Sum20_stage3_add_temp(52 DOWNTO 50) /= "000") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum20_stage3_add_temp(53) = '1') AND (Sum20_stage3_add_temp(52 DOWNTO 50) /= "111") ELSE
      Sum20_stage3_add_temp(50 DOWNTO 5);

  Delay_Mod2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay_Mod2_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay_Mod2_out1 <= I29_2;
      END IF;
    END IF;
  END PROCESS Delay_Mod2_process;


  s_input_acc_cast_4 <= resize(Delay_Mod2_out1(45 DOWNTO 8), 46);

  denom_acc111_sub_cast <= resize(s_input_acc_cast_4, 47);
  denom_acc111_sub_cast_1 <= resize(s_denom_gain1_6, 47);
  denom_acc111_sub_temp <= denom_acc111_sub_cast - denom_acc111_sub_cast_1;
  
  s_denom_acc_out1_6 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc111_sub_temp(46) = '0') AND (denom_acc111_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc111_sub_temp(46) = '1') AND (denom_acc111_sub_temp(45) /= '1') ELSE
      denom_acc111_sub_temp(45 DOWNTO 0);

  -- CSD Encoding (56805) : 1001'0001'0001'00101; Cost (Adders) = 5
  nume_gain_b011_mul_temp <= ((((resize(s_denom_acc_out1_6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) - resize(s_denom_acc_out1_6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_6 & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_denom_acc_out1_6 & '0' & '0', 63)) + resize(s_denom_acc_out1_6, 63);
  
  s_nume_gain_b0_4 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b011_mul_temp(62) = '0') AND (nume_gain_b011_mul_temp(61) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b011_mul_temp(62) = '1') AND (nume_gain_b011_mul_temp(61) /= '1') ELSE
      nume_gain_b011_mul_temp(61 DOWNTO 16);

  s_nume_gain_b0_cast_4 <= resize(s_nume_gain_b0_4(45 DOWNTO 1), 46);

  s_nume_acc111_add_cast <= resize(s_nume_gain_b0_cast_4, 47);
  s_nume_acc111_add_cast_1 <= resize(s_nume_acc_cast1_6, 47);
  s_nume_acc111_add_temp <= s_nume_acc111_add_cast + s_nume_acc111_add_cast_1;
  
  s_nume_acc_out1_4 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc111_add_temp(46) = '0') AND (s_nume_acc111_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc111_add_temp(46) = '1') AND (s_nume_acc111_add_temp(45) /= '1') ELSE
      s_nume_acc111_add_temp(45 DOWNTO 0);

  V29 <= s_nume_acc_out1_4;

  -- CSD Encoding (24019198012643) : 010110001'01'0000110100001'0001000001'01'01001'00011; Cost (Adders) = 15
  Gain43_mul_temp <= ((((((((((((((resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V29 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V29 & '0' & '0' & '0' & '0' & '0', 92)) + resize(V29 & '0', 92)) + resize(V29, 92);
  
  I13 <= "0111111111111111111111111111111111111111111111" WHEN (Gain43_mul_temp(91) = '0') AND (Gain43_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain43_mul_temp(91) = '1') AND (Gain43_mul_temp(90) /= '1') ELSE
      Gain43_mul_temp(90 DOWNTO 45);

  Difference7_out1_signed <= signed(Difference7_out1);

  -- CSD Encoding (32425917317068) : 10001'01'000001'001'000001'010010001000000001'001100; Cost (Adders) = 11
  Gain46_mul_temp <= ((((((((((resize(Difference7_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) - resize(Difference7_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference7_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference7_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference7_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference7_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference7_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference7_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference7_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference7_out1_signed & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference7_out1_signed & '0' & '0' & '0', 92)) + resize(Difference7_out1_signed & '0' & '0', 92);
  
  I13_1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain46_mul_temp(91) = '0') AND (Gain46_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain46_mul_temp(91) = '1') AND (Gain46_mul_temp(90) /= '1') ELSE
      Gain46_mul_temp(90 DOWNTO 45);

  Sum28_add_cast <= resize(I13_1, 47);
  Sum28_add_cast_1 <= resize(I13, 47);
  Sum28_add_temp <= Sum28_add_cast + Sum28_add_cast_1;
  
  I13_2 <= "0111111111111111111111111111111111111111111111" WHEN (Sum28_add_temp(46) = '0') AND (Sum28_add_temp(45 DOWNTO 41) /= "00000") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum28_add_temp(46) = '1') AND (Sum28_add_temp(45 DOWNTO 41) /= "11111") ELSE
      Sum28_add_temp(41 DOWNTO 0) & '0' & '0' & '0' & '0';

  Delay_Mod5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay_Mod5_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay_Mod5_out1 <= I13_2;
      END IF;
    END IF;
  END PROCESS Delay_Mod5_process;


  s_input_acc_cast_5 <= resize(Delay_Mod5_out1(45 DOWNTO 6), 46);

  denom_acc14_sub_cast <= resize(s_input_acc_cast_5, 47);
  denom_acc14_sub_cast_1 <= resize(s_denom_gain1_5, 47);
  denom_acc14_sub_temp <= denom_acc14_sub_cast - denom_acc14_sub_cast_1;
  
  s_denom_acc_out1_5 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc14_sub_temp(46) = '0') AND (denom_acc14_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc14_sub_temp(46) = '1') AND (denom_acc14_sub_temp(45) /= '1') ELSE
      denom_acc14_sub_temp(45 DOWNTO 0);

  -- CSD Encoding (35351) : 01000101000011001'; Cost (Adders) = 5
  nume_gain_b04_mul_temp <= ((((resize(s_denom_acc_out1_5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) + resize(s_denom_acc_out1_5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_denom_acc_out1_5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_denom_acc_out1_5 & '0' & '0' & '0' & '0', 63)) + resize(s_denom_acc_out1_5 & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_5, 63);
  
  s_nume_gain_b0_5 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b04_mul_temp(62) = '0') AND (nume_gain_b04_mul_temp(61) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b04_mul_temp(62) = '1') AND (nume_gain_b04_mul_temp(61) /= '1') ELSE
      nume_gain_b04_mul_temp(61 DOWNTO 16);

  s_nume_gain_b0_cast_5 <= resize(s_nume_gain_b0_5(45 DOWNTO 1), 46);

  s_nume_acc14_add_cast <= resize(s_nume_gain_b0_cast_5, 47);
  s_nume_acc14_add_cast_1 <= resize(s_nume_acc_cast1_5, 47);
  s_nume_acc14_add_temp <= s_nume_acc14_add_cast + s_nume_acc14_add_cast_1;
  
  s_nume_acc_out1_5 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc14_add_temp(46) = '0') AND (s_nume_acc14_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc14_add_temp(46) = '1') AND (s_nume_acc14_add_temp(45) /= '1') ELSE
      s_nume_acc14_add_temp(45 DOWNTO 0);

  V13 <= s_nume_acc_out1_5;

  Gain61_cast <= resize(V13, 47);
  Gain61_cast_1 <=  - (Gain61_cast);
  Gain61_cast_2 <= Gain61_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  
  Gain61_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain61_cast_2(91) = '0') AND (Gain61_cast_2(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain61_cast_2(91) = '1') AND (Gain61_cast_2(90) /= '1') ELSE
      Gain61_cast_2(90 DOWNTO 45);

  Discrete_Time_Integrator1_indtc <= Gain61_out1;

  gain_mul_temp <= signed'("0001000111000111000111000111000111000111000111") * Discrete_Time_Integrator1_indtc;
  Discrete_Time_Integrator1_u_gain <= resize(gain_mul_temp(91 DOWNTO 53), 46);

  Discrete_Time_Integrator1_u_dtc <= Discrete_Time_Integrator1_u_gain;

  adder1_add_cast <= resize(V14, 47);
  adder1_add_cast_1 <= resize(Discrete_Time_Integrator1_u_dtc, 47);
  adder1_add_temp <= adder1_add_cast + adder1_add_cast_1;
  
  Discrete_Time_Integrator1_y_add <= "0111111111111111111111111111111111111111111111" WHEN (adder1_add_temp(46) = '0') AND (adder1_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (adder1_add_temp(46) = '1') AND (adder1_add_temp(45) /= '1') ELSE
      adder1_add_temp(45 DOWNTO 0);

  
  Discrete_Time_Integrator1_y_sat <= signed'("0001010000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator1_y_add > signed'("0001010000000000000000000000000000000000000000") ELSE
      signed'("1110110000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator1_y_add < signed'("1110110000000000000000000000000000000000000000") ELSE
      Discrete_Time_Integrator1_y_add;

  Discrete_Time_Integrator1_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Discrete_Time_Integrator1_x_reg <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Discrete_Time_Integrator1_x_reg <= Discrete_Time_Integrator1_y_sat;
      END IF;
    END IF;
  END PROCESS Discrete_Time_Integrator1_reg_process;


  adder_add_cast <= resize(Discrete_Time_Integrator1_x_reg, 47);
  adder_add_cast_1 <= resize(Discrete_Time_Integrator1_u_dtc, 47);
  adder_add_temp <= adder_add_cast + adder_add_cast_1;
  
  Discrete_Time_Integrator1_x_add <= "0111111111111111111111111111111111111111111111" WHEN (adder_add_temp(46) = '0') AND (adder_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (adder_add_temp(46) = '1') AND (adder_add_temp(45) /= '1') ELSE
      adder_add_temp(45 DOWNTO 0);

  
  V14 <= signed'("0001010000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator1_x_add > signed'("0001010000000000000000000000000000000000000000") ELSE
      signed'("1110110000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator1_x_add < signed'("1110110000000000000000000000000000000000000000") ELSE
      Discrete_Time_Integrator1_x_add;

  -- CSD Encoding (26687997791825) : 0110000100011001'001000101000001101001'001010001; Cost (Adders) = 15
  Gain62_mul_temp <= ((((((((((((((resize(V14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V14 & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V14 & '0' & '0' & '0' & '0', 92)) + resize(V14, 92);
  
  I28 <= "0111111111111111111111111111111111111111111111" WHEN (Gain62_mul_temp(91) = '0') AND (Gain62_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain62_mul_temp(91) = '1') AND (Gain62_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain62_mul_temp(89 DOWNTO 44);

  Path_Delay_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Path_Delay_5_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Path_Delay_5_out1 <= I28;
      END IF;
    END IF;
  END PROCESS Path_Delay_5_process;


  Difference9_out1_signed <= signed(Difference9_out1);

  -- FCSD for 31665934879949 = 53 X 597470469433; Total Cost = 15
  -- CSD Encoding (53) : 0110101; Cost (Adders) = 3
  Gain57_factor <= ((resize(Difference9_out1_signed & '0' & '0' & '0' & '0' & '0', 92) + resize(Difference9_out1_signed & '0' & '0' & '0' & '0', 92)) + resize(Difference9_out1_signed & '0' & '0', 92)) + resize(Difference9_out1_signed, 92);
  -- CSD Encoding (597470469433) : 010001011001001'0000000100001'001'0101001'001; Cost (Adders) = 12
  Gain57_mul_temp <= (((((((((((resize(Gain57_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Gain57_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain57_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain57_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain57_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain57_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain57_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain57_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain57_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain57_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain57_factor & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain57_factor & '0' & '0' & '0', 92)) + Gain57_factor;
  
  I1_1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain57_mul_temp(91) = '0') AND (Gain57_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain57_mul_temp(91) = '1') AND (Gain57_mul_temp(90) /= '1') ELSE
      Gain57_mul_temp(90 DOWNTO 45);

  Sum14_add_cast <= resize(I1_1 & '0' & '0' & '0' & '0', 51);
  Sum14_add_cast_1 <= resize(Path_Delay_5_out1, 51);
  Sum14_add_temp <= Sum14_add_cast + Sum14_add_cast_1;
  
  I28_1 <= "0111111111111111111111111111111111111111111111" WHEN (Sum14_add_temp(50) = '0') AND (Sum14_add_temp(49) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum14_add_temp(50) = '1') AND (Sum14_add_temp(49) /= '1') ELSE
      Sum14_add_temp(49 DOWNTO 4);

  s_input_acc_cast_6 <= resize(I28_1(45 DOWNTO 11), 46);

  denom_acc110_sub_cast <= resize(s_input_acc_cast_6, 47);
  denom_acc110_sub_cast_1 <= resize(s_denom_gain1_4, 47);
  denom_acc110_sub_temp <= denom_acc110_sub_cast - denom_acc110_sub_cast_1;
  
  s_denom_acc_out1_4 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc110_sub_temp(46) = '0') AND (denom_acc110_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc110_sub_temp(46) = '1') AND (denom_acc110_sub_temp(45) /= '1') ELSE
      denom_acc110_sub_temp(45 DOWNTO 0);

  -- CSD Encoding (72095) : 010001100110100001'; Cost (Adders) = 6
  nume_gain_b010_mul_temp <= (((((resize(s_denom_acc_out1_4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) + resize(s_denom_acc_out1_4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_denom_acc_out1_4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_denom_acc_out1_4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_denom_acc_out1_4 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_denom_acc_out1_4 & '0' & '0' & '0' & '0' & '0', 64)) - resize(s_denom_acc_out1_4, 64);
  
  s_nume_gain_b0_6 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b010_mul_temp(63) = '0') AND (nume_gain_b010_mul_temp(62 DOWNTO 61) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b010_mul_temp(63) = '1') AND (nume_gain_b010_mul_temp(62 DOWNTO 61) /= "11") ELSE
      nume_gain_b010_mul_temp(61 DOWNTO 16);

  s_nume_gain_b0_cast_6 <= resize(s_nume_gain_b0_6(45 DOWNTO 1), 46);

  s_nume_acc110_add_cast <= resize(s_nume_gain_b0_cast_6, 47);
  s_nume_acc110_add_cast_1 <= resize(s_nume_acc_cast1_4, 47);
  s_nume_acc110_add_temp <= s_nume_acc110_add_cast + s_nume_acc110_add_cast_1;
  
  s_nume_acc_out1_6 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc110_add_temp(46) = '0') AND (s_nume_acc110_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc110_add_temp(46) = '1') AND (s_nume_acc110_add_temp(45) /= '1') ELSE
      s_nume_acc110_add_temp(45 DOWNTO 0);

  V28 <= s_nume_acc_out1_6;

  Difference8_out1_signed <= signed(Difference8_out1);

  -- FCSD for 31665934879949 = 53 X 597470469433; Total Cost = 15
  -- CSD Encoding (53) : 0110101; Cost (Adders) = 3
  Gain64_factor <= ((resize(Difference8_out1_signed & '0' & '0' & '0' & '0' & '0', 92) + resize(Difference8_out1_signed & '0' & '0' & '0' & '0', 92)) + resize(Difference8_out1_signed & '0' & '0', 92)) + resize(Difference8_out1_signed, 92);
  -- CSD Encoding (597470469433) : 010001011001001'0000000100001'001'0101001'001; Cost (Adders) = 12
  Gain64_mul_temp <= (((((((((((resize(Gain64_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Gain64_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain64_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain64_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain64_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain64_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain64_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain64_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain64_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain64_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain64_factor & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain64_factor & '0' & '0' & '0', 92)) + Gain64_factor;
  
  Gain64_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain64_mul_temp(91) = '0') AND (Gain64_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain64_mul_temp(91) = '1') AND (Gain64_mul_temp(90) /= '1') ELSE
      Gain64_mul_temp(90 DOWNTO 45);

  Product_mul_temp <= Mult_delay3_out1 * V24_signed;
  
  Product_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Product_mul_temp(67) = '0') AND (Product_mul_temp(66 DOWNTO 65) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Product_mul_temp(67) = '1') AND (Product_mul_temp(66 DOWNTO 65) /= "11") ELSE
      Product_mul_temp(65 DOWNTO 20);

  -- CSD Encoding (91019) : 01011001001'0001011; Cost (Adders) = 7
  nume_gain17_mul_temp <= ((((((resize(s_state_out1_11 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) + resize(s_state_out1_11 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_state_out1_11 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_state_out1_11 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) - resize(s_state_out1_11 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_state_out1_11 & '0' & '0' & '0', 64)) + resize(s_state_out1_11 & '0', 64)) + resize(s_state_out1_11, 64);
  
  s_nume_gain1_10 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain17_mul_temp(63) = '0') AND (nume_gain17_mul_temp(62) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain17_mul_temp(63) = '1') AND (nume_gain17_mul_temp(62) /= '1') ELSE
      nume_gain17_mul_temp(62 DOWNTO 17);

  s_nume_acc_cast1_10 <= resize(s_nume_gain1_10(45 DOWNTO 1), 46);

  s_state_out17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_11 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_11 <= s_denom_acc_out1_10;
      END IF;
    END IF;
  END PROCESS s_state_out17_process;


  -- CSD Encoding (16383) : 100000000000001'; Cost (Adders) = 1
  denom_gain17_mul_temp <=  - (resize(s_state_out1_11 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62) - resize(s_state_out1_11, 62));
  
  s_denom_gain1_10 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain17_mul_temp(61) = '0') AND (denom_gain17_mul_temp(60 DOWNTO 59) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain17_mul_temp(61) = '1') AND (denom_gain17_mul_temp(60 DOWNTO 59) /= "11") ELSE
      denom_gain17_mul_temp(59 DOWNTO 14);

  Difference11_out1_signed <= signed(Difference11_out1);

  -- CSD Encoding (25332747903959) : 011001'000010100100001'01'001'000010100100001'01'001'; Cost (Adders) = 14
  Gain66_mul_temp <= (((((((((((((resize(Difference11_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Difference11_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference11_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference11_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference11_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference11_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference11_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference11_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference11_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference11_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference11_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference11_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference11_out1_signed & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference11_out1_signed & '0' & '0' & '0', 92)) - resize(Difference11_out1_signed, 92);
  
  I21 <= "0111111111111111111111111111111111111111111111" WHEN (Gain66_mul_temp(91) = '0') AND (Gain66_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain66_mul_temp(91) = '1') AND (Gain66_mul_temp(90) /= '1') ELSE
      Gain66_mul_temp(90 DOWNTO 45);

  -- CSD Encoding (56803) : 1001'0001'0001'00011; Cost (Adders) = 5
  nume_gain115_mul_temp <= ((((resize(s_state_out1_12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) - resize(s_state_out1_12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_12 & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_12 & '0', 63)) + resize(s_state_out1_12, 63);
  
  s_nume_gain1_11 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain115_mul_temp(62) = '0') AND (nume_gain115_mul_temp(61) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain115_mul_temp(62) = '1') AND (nume_gain115_mul_temp(61) /= '1') ELSE
      nume_gain115_mul_temp(61 DOWNTO 16);

  s_nume_acc_cast1_11 <= resize(s_nume_gain1_11(45 DOWNTO 1), 46);

  s_state_out115_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_12 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_12 <= s_denom_acc_out1_11;
      END IF;
    END IF;
  END PROCESS s_state_out115_process;


  -- CSD Encoding (65339) : 100000001'010001'01'; Cost (Adders) = 4
  denom_gain115_mul_temp <=  - ((((resize(s_state_out1_12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) - resize(s_state_out1_12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_state_out1_12 & '0' & '0' & '0' & '0' & '0' & '0', 64)) - resize(s_state_out1_12 & '0' & '0', 64)) - resize(s_state_out1_12, 64));
  
  s_denom_gain1_11 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain115_mul_temp(63) = '0') AND (denom_gain115_mul_temp(62 DOWNTO 61) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain115_mul_temp(63) = '1') AND (denom_gain115_mul_temp(62 DOWNTO 61) /= "11") ELSE
      denom_gain115_mul_temp(61 DOWNTO 16);

  -- CSD Encoding (56815) : 1001'0001'00001'0001'; Cost (Adders) = 4
  nume_gain16_mul_temp <= (((resize(s_state_out1_13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) - resize(s_state_out1_13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_13 & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_13, 63);
  
  s_nume_gain1_12 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain16_mul_temp(62) = '0') AND (nume_gain16_mul_temp(61) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain16_mul_temp(62) = '1') AND (nume_gain16_mul_temp(61) /= '1') ELSE
      nume_gain16_mul_temp(61 DOWNTO 16);

  s_nume_acc_cast1_12 <= resize(s_nume_gain1_12(45 DOWNTO 1), 46);

  s_state_out16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_13 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_13 <= s_denom_acc_out1_12;
      END IF;
    END IF;
  END PROCESS s_state_out16_process;


  -- FCSD for 65365 = 17 X 5 X 769; Total Cost = 4
  -- CSD Encoding (17) : 010001; Cost (Adders) = 1
  denom_gain16_factor <= resize(s_state_out1_13 & '0' & '0' & '0' & '0', 64) + resize(s_state_out1_13, 64);
  -- CSD Encoding (5) : 0101; Cost (Adders) = 1
  denom_gain16_factor_1 <= resize(denom_gain16_factor & '0' & '0', 64) + denom_gain16_factor;
  -- CSD Encoding (769) : 01100000001; Cost (Adders) = 2
  denom_gain16_mul_temp <=  - ((resize(denom_gain16_factor_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) + resize(denom_gain16_factor_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + denom_gain16_factor_1);
  
  s_denom_gain1_12 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain16_mul_temp(63) = '0') AND (denom_gain16_mul_temp(62 DOWNTO 61) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain16_mul_temp(63) = '1') AND (denom_gain16_mul_temp(62 DOWNTO 61) /= "11") ELSE
      denom_gain16_mul_temp(61 DOWNTO 16);

  -- CSD Encoding (24019198012643) : 010110001'01'0000110100001'0001000001'01'01001'00011; Cost (Adders) = 15
  Gain17_mul_temp <= ((((((((((((((resize(V16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V16 & '0' & '0' & '0' & '0' & '0', 92)) + resize(V16 & '0', 92)) + resize(V16, 92);
  
  I20 <= "0111111111111111111111111111111111111111111111" WHEN (Gain17_mul_temp(91) = '0') AND (Gain17_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain17_mul_temp(91) = '1') AND (Gain17_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain17_mul_temp(89 DOWNTO 44);

  -- FCSD for 25923 = 3 X 8641; Total Cost = 4
  -- CSD Encoding (3) : 011; Cost (Adders) = 1
  nume_gain15_factor <= resize(s_state_out1_14 & '0', 62) + resize(s_state_out1_14, 62);
  -- CSD Encoding (8641) : 010001001'000001; Cost (Adders) = 3
  nume_gain15_mul_temp <= ((resize(nume_gain15_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62) + resize(nume_gain15_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) - resize(nume_gain15_factor & '0' & '0' & '0' & '0' & '0' & '0', 62)) + nume_gain15_factor;
  
  s_nume_gain1_13 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain15_mul_temp(61) = '0') AND (nume_gain15_mul_temp(60) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain15_mul_temp(61) = '1') AND (nume_gain15_mul_temp(60) /= '1') ELSE
      nume_gain15_mul_temp(60 DOWNTO 15);

  s_nume_acc_cast1_13 <= resize(s_nume_gain1_13(45 DOWNTO 1), 46);

  s_state_out15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_14 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_14 <= s_denom_acc_out1_13;
      END IF;
    END IF;
  END PROCESS s_state_out15_process;


  -- CSD Encoding (32215) : 1000001'0001'01'001'; Cost (Adders) = 4
  denom_gain15_mul_temp <=  - ((((resize(s_state_out1_14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) - resize(s_state_out1_14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_14 & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_14 & '0' & '0' & '0', 63)) - resize(s_state_out1_14, 63));
  
  s_denom_gain1_13 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain15_mul_temp(62) = '0') AND (denom_gain15_mul_temp(61 DOWNTO 60) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain15_mul_temp(62) = '1') AND (denom_gain15_mul_temp(61 DOWNTO 60) /= "11") ELSE
      denom_gain15_mul_temp(60 DOWNTO 15);

  Difference4_out1_signed <= signed(Difference4_out1);

  -- CSD Encoding (22049623775606) : 0101000001001'001'0101000000001'00001100110001'01'0; Cost (Adders) = 13
  Gain42_mul_temp <= ((((((((((((resize(Difference4_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Difference4_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference4_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference4_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference4_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference4_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference4_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference4_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference4_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference4_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference4_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference4_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference4_out1_signed & '0' & '0' & '0', 92)) - resize(Difference4_out1_signed & '0', 92);
  
  I6 <= "0111111111111111111111111111111111111111111111" WHEN (Gain42_mul_temp(91) = '0') AND (Gain42_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain42_mul_temp(91) = '1') AND (Gain42_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain42_mul_temp(89 DOWNTO 44);

  -- CSD Encoding (24019198012643) : 010110001'01'0000110100001'0001000001'01'01001'00011; Cost (Adders) = 15
  Gain18_mul_temp <= ((((((((((((((resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V20 & '0' & '0' & '0' & '0' & '0', 92)) + resize(V20 & '0', 92)) + resize(V20, 92);
  
  I16 <= "0111111111111111111111111111111111111111111111" WHEN (Gain18_mul_temp(91) = '0') AND (Gain18_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain18_mul_temp(91) = '1') AND (Gain18_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain18_mul_temp(89 DOWNTO 44);

  Sum8_add_cast <= resize(I16 & '0' & '0', 49);
  Sum8_add_cast_1 <= resize(I6, 49);
  Sum8_add_temp <= Sum8_add_cast + Sum8_add_cast_1;
  
  I16_1 <= "0111111111111111111111111111111111111111111111" WHEN (Sum8_add_temp(48) = '0') AND (Sum8_add_temp(47) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum8_add_temp(48) = '1') AND (Sum8_add_temp(47) /= '1') ELSE
      Sum8_add_temp(47 DOWNTO 2);

  Delay_Mod1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay_Mod1_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay_Mod1_out1 <= I16_1;
      END IF;
    END IF;
  END PROCESS Delay_Mod1_process;


  s_input_acc_cast_7 <= resize(Delay_Mod1_out1(45 DOWNTO 6), 46);

  denom_acc15_sub_cast <= resize(s_input_acc_cast_7, 47);
  denom_acc15_sub_cast_1 <= resize(s_denom_gain1_13, 47);
  denom_acc15_sub_temp <= denom_acc15_sub_cast - denom_acc15_sub_cast_1;
  
  s_denom_acc_out1_13 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc15_sub_temp(46) = '0') AND (denom_acc15_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc15_sub_temp(46) = '1') AND (denom_acc15_sub_temp(45) /= '1') ELSE
      denom_acc15_sub_temp(45 DOWNTO 0);

  -- FCSD for 25923 = 3 X 8641; Total Cost = 4
  -- CSD Encoding (3) : 011; Cost (Adders) = 1
  nume_gain_b05_factor <= resize(s_denom_acc_out1_13 & '0', 62) + resize(s_denom_acc_out1_13, 62);
  -- CSD Encoding (8641) : 010001001'000001; Cost (Adders) = 3
  nume_gain_b05_mul_temp <= ((resize(nume_gain_b05_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62) + resize(nume_gain_b05_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) - resize(nume_gain_b05_factor & '0' & '0' & '0' & '0' & '0' & '0', 62)) + nume_gain_b05_factor;
  
  s_nume_gain_b0_7 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b05_mul_temp(61) = '0') AND (nume_gain_b05_mul_temp(60) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b05_mul_temp(61) = '1') AND (nume_gain_b05_mul_temp(60) /= '1') ELSE
      nume_gain_b05_mul_temp(60 DOWNTO 15);

  s_nume_gain_b0_cast_7 <= resize(s_nume_gain_b0_7(45 DOWNTO 1), 46);

  s_nume_acc15_add_cast <= resize(s_nume_gain_b0_cast_7, 47);
  s_nume_acc15_add_cast_1 <= resize(s_nume_acc_cast1_13, 47);
  s_nume_acc15_add_temp <= s_nume_acc15_add_cast + s_nume_acc15_add_cast_1;
  
  s_nume_acc_out1_7 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc15_add_temp(46) = '0') AND (s_nume_acc15_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc15_add_temp(46) = '1') AND (s_nume_acc15_add_temp(45) /= '1') ELSE
      s_nume_acc15_add_temp(45 DOWNTO 0);

  V16 <= s_nume_acc_out1_7;

  Gain19_cast <= resize(V16, 47);
  Gain19_cast_1 <=  - (Gain19_cast);
  Gain19_cast_2 <= Gain19_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  
  Gain19_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain19_cast_2(91) = '0') AND (Gain19_cast_2(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain19_cast_2(91) = '1') AND (Gain19_cast_2(90) /= '1') ELSE
      Gain19_cast_2(90 DOWNTO 45);

  Discrete_Time_Integrator4_indtc <= Gain19_out1;

  gain2_mul_temp <= signed'("0001000111000111000111000111000111000111000111") * Discrete_Time_Integrator4_indtc;
  Discrete_Time_Integrator4_u_gain <= resize(gain2_mul_temp(91 DOWNTO 47), 46);

  Discrete_Time_Integrator4_u_dtc <= Discrete_Time_Integrator4_u_gain;

  adder5_add_cast <= resize(V15, 47);
  adder5_add_cast_1 <= resize(Discrete_Time_Integrator4_u_dtc, 47);
  adder5_add_temp <= adder5_add_cast + adder5_add_cast_1;
  
  Discrete_Time_Integrator4_y_add <= "0111111111111111111111111111111111111111111111" WHEN (adder5_add_temp(46) = '0') AND (adder5_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (adder5_add_temp(46) = '1') AND (adder5_add_temp(45) /= '1') ELSE
      adder5_add_temp(45 DOWNTO 0);

  
  Discrete_Time_Integrator4_y_sat <= signed'("0001010000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator4_y_add > signed'("0001010000000000000000000000000000000000000000") ELSE
      signed'("1110110000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator4_y_add < signed'("1110110000000000000000000000000000000000000000") ELSE
      Discrete_Time_Integrator4_y_add;

  Discrete_Time_Integrator4_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Discrete_Time_Integrator4_x_reg <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Discrete_Time_Integrator4_x_reg <= Discrete_Time_Integrator4_y_sat;
      END IF;
    END IF;
  END PROCESS Discrete_Time_Integrator4_reg_process;


  adder4_add_cast <= resize(Discrete_Time_Integrator4_x_reg, 47);
  adder4_add_cast_1 <= resize(Discrete_Time_Integrator4_u_dtc, 47);
  adder4_add_temp <= adder4_add_cast + adder4_add_cast_1;
  
  Discrete_Time_Integrator4_x_add <= "0111111111111111111111111111111111111111111111" WHEN (adder4_add_temp(46) = '0') AND (adder4_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (adder4_add_temp(46) = '1') AND (adder4_add_temp(45) /= '1') ELSE
      adder4_add_temp(45 DOWNTO 0);

  
  V15 <= signed'("0001010000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator4_x_add > signed'("0001010000000000000000000000000000000000000000") ELSE
      signed'("1110110000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator4_x_add < signed'("1110110000000000000000000000000000000000000000") ELSE
      Discrete_Time_Integrator4_x_add;

  -- CSD Encoding (24530244778869) : 010110010100001'01'0010010001001'01'0001'001'001'0101; Cost (Adders) = 16
  Gain60_mul_temp <= (((((((((((((((resize(V15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V15 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V15 & '0' & '0' & '0' & '0', 92)) + resize(V15 & '0' & '0', 92)) + resize(V15, 92);
  
  I20_1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain60_mul_temp(91) = '0') AND (Gain60_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain60_mul_temp(91) = '1') AND (Gain60_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain60_mul_temp(89 DOWNTO 44);

  -- CSD Encoding (24019198012643) : 010110001'01'0000110100001'0001000001'01'01001'00011; Cost (Adders) = 15
  Gain16_mul_temp <= ((((((((((((((resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0', 92)) + resize(V8, 92);
  
  I20_2 <= "0111111111111111111111111111111111111111111111" WHEN (Gain16_mul_temp(91) = '0') AND (Gain16_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain16_mul_temp(91) = '1') AND (Gain16_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain16_mul_temp(89 DOWNTO 44);

  Sum7_stage2_add_cast <= resize(I20_2 & '0' & '0', 49);
  Sum7_stage2_add_cast_1 <= resize(I20_1, 49);
  Sum7_op_stage1 <= Sum7_stage2_add_cast + Sum7_stage2_add_cast_1;

  Sum7_stage3_add_cast <= resize(Sum7_op_stage1, 50);
  Sum7_stage3_add_cast_1 <= resize(I20 & '0', 49);
  Sum7_stage3_add_cast_2 <= resize(Sum7_stage3_add_cast_1, 50);
  Sum7_stage3_add_temp <= Sum7_stage3_add_cast + Sum7_stage3_add_cast_2;
  
  Sum7_stage3_cast <= "0111111111111111111111111111111111111111111111111" WHEN (Sum7_stage3_add_temp(49) = '0') AND (Sum7_stage3_add_temp(48) /= '0') ELSE
      "1000000000000000000000000000000000000000000000000" WHEN (Sum7_stage3_add_temp(49) = '1') AND (Sum7_stage3_add_temp(48) /= '1') ELSE
      Sum7_stage3_add_temp(48 DOWNTO 0);
  
  I20_3 <= "0111111111111111111111111111111111111111111111" WHEN (Sum7_stage3_cast(48) = '0') AND (Sum7_stage3_cast(47) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum7_stage3_cast(48) = '1') AND (Sum7_stage3_cast(47) /= '1') ELSE
      Sum7_stage3_cast(47 DOWNTO 2);

  s_input_acc_cast_8 <= resize(I20_3(45 DOWNTO 9), 46);

  denom_acc16_sub_cast <= resize(s_input_acc_cast_8, 47);
  denom_acc16_sub_cast_1 <= resize(s_denom_gain1_12, 47);
  denom_acc16_sub_temp <= denom_acc16_sub_cast - denom_acc16_sub_cast_1;
  
  s_denom_acc_out1_12 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc16_sub_temp(46) = '0') AND (denom_acc16_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc16_sub_temp(46) = '1') AND (denom_acc16_sub_temp(45) /= '1') ELSE
      denom_acc16_sub_temp(45 DOWNTO 0);

  -- CSD Encoding (56815) : 1001'0001'00001'0001'; Cost (Adders) = 4
  nume_gain_b06_mul_temp <= (((resize(s_denom_acc_out1_12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) - resize(s_denom_acc_out1_12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_12 & '0' & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_12, 63);
  
  s_nume_gain_b0_8 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b06_mul_temp(62) = '0') AND (nume_gain_b06_mul_temp(61) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b06_mul_temp(62) = '1') AND (nume_gain_b06_mul_temp(61) /= '1') ELSE
      nume_gain_b06_mul_temp(61 DOWNTO 16);

  s_nume_gain_b0_cast_8 <= resize(s_nume_gain_b0_8(45 DOWNTO 1), 46);

  s_nume_acc16_add_cast <= resize(s_nume_gain_b0_cast_8, 47);
  s_nume_acc16_add_cast_1 <= resize(s_nume_acc_cast1_12, 47);
  s_nume_acc16_add_temp <= s_nume_acc16_add_cast + s_nume_acc16_add_cast_1;
  
  s_nume_acc_out1_8 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc16_add_temp(46) = '0') AND (s_nume_acc16_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc16_add_temp(46) = '1') AND (s_nume_acc16_add_temp(45) /= '1') ELSE
      s_nume_acc16_add_temp(45 DOWNTO 0);

  V20 <= s_nume_acc_out1_8;

  -- CSD Encoding (24019198012643) : 010110001'01'0000110100001'0001000001'01'01001'00011; Cost (Adders) = 15
  Gain15_mul_temp <= ((((((((((((((resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V20 & '0' & '0' & '0' & '0' & '0', 92)) + resize(V20 & '0', 92)) + resize(V20, 92);
  
  I8 <= "0111111111111111111111111111111111111111111111" WHEN (Gain15_mul_temp(91) = '0') AND (Gain15_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain15_mul_temp(91) = '1') AND (Gain15_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain15_mul_temp(89 DOWNTO 44);

  V21 <= s_nume_acc_out1_9;

  -- CSD Encoding (28823037615171) : 01101001001'001'001'000110001'01'01'001001'0001000011; Cost (Adders) = 16
  Gain31_mul_temp <= (((((((((((((((resize(V21 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V21 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V21 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V21 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V21 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V21 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V21 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V21 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V21 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V21 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V21 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V21 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V21 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V21 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V21 & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V21 & '0', 92)) + resize(V21, 92);
  
  Gain31_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain31_mul_temp(91) = '0') AND (Gain31_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain31_mul_temp(91) = '1') AND (Gain31_mul_temp(90) /= '1') ELSE
      Gain31_mul_temp(90 DOWNTO 45);

  -- CSD Encoding (36409) : 01001001'001001'001; Cost (Adders) = 5
  nume_gain114_mul_temp <= ((((resize(s_state_out1_15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) + resize(s_state_out1_15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_state_out1_15 & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_state_out1_15 & '0' & '0' & '0', 63)) + resize(s_state_out1_15, 63);
  
  s_nume_gain1_14 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain114_mul_temp(62) = '0') AND (nume_gain114_mul_temp(61 DOWNTO 60) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain114_mul_temp(62) = '1') AND (nume_gain114_mul_temp(61 DOWNTO 60) /= "11") ELSE
      nume_gain114_mul_temp(60 DOWNTO 15);

  s_nume_acc_cast1_14 <= resize(s_nume_gain1_14(45 DOWNTO 1), 46);

  s_state_out114_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_15 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_15 <= s_denom_acc_out1_14;
      END IF;
    END IF;
  END PROCESS s_state_out114_process;


  -- CSD Encoding (65535) : 10000000000000001'; Cost (Adders) = 1
  denom_gain114_mul_temp <=  - (resize(s_state_out1_15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) - resize(s_state_out1_15, 64));
  
  s_denom_gain1_14 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain114_mul_temp(63) = '0') AND (denom_gain114_mul_temp(62 DOWNTO 61) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain114_mul_temp(63) = '1') AND (denom_gain114_mul_temp(62 DOWNTO 61) /= "11") ELSE
      denom_gain114_mul_temp(61 DOWNTO 16);

  -- CSD Encoding (24019198012643) : 010110001'01'0000110100001'0001000001'01'01001'00011; Cost (Adders) = 15
  Gain14_mul_temp <= ((((((((((((((resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0', 92)) + resize(V8, 92);
  
  I7 <= "0111111111111111111111111111111111111111111111" WHEN (Gain14_mul_temp(91) = '0') AND (Gain14_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain14_mul_temp(91) = '1') AND (Gain14_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain14_mul_temp(89 DOWNTO 44);

  Sum5_add_cast <= resize(I1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 59);
  Sum5_add_cast_1 <= resize(I7, 59);
  Sum5_add_temp <= Sum5_add_cast + Sum5_add_cast_1;
  
  I7_1 <= "0111111111111111111111111111111111111111111111" WHEN (Sum5_add_temp(58) = '0') AND (Sum5_add_temp(57) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum5_add_temp(58) = '1') AND (Sum5_add_temp(57) /= '1') ELSE
      Sum5_add_temp(57 DOWNTO 12);

  s_input_acc_cast_9 <= resize(I7_1(45 DOWNTO 5), 46);

  denom_acc114_sub_cast <= resize(s_input_acc_cast_9, 47);
  denom_acc114_sub_cast_1 <= resize(s_denom_gain1_14, 47);
  denom_acc114_sub_temp <= denom_acc114_sub_cast - denom_acc114_sub_cast_1;
  
  s_denom_acc_out1_14 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc114_sub_temp(46) = '0') AND (denom_acc114_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc114_sub_temp(46) = '1') AND (denom_acc114_sub_temp(45) /= '1') ELSE
      denom_acc114_sub_temp(45 DOWNTO 0);

  -- CSD Encoding (36409) : 01001001'001001'001; Cost (Adders) = 5
  nume_gain_b014_mul_temp <= ((((resize(s_denom_acc_out1_14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) + resize(s_denom_acc_out1_14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_14 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_denom_acc_out1_14 & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_14 & '0' & '0' & '0', 63)) + resize(s_denom_acc_out1_14, 63);
  
  s_nume_gain_b0_9 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b014_mul_temp(62) = '0') AND (nume_gain_b014_mul_temp(61 DOWNTO 60) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b014_mul_temp(62) = '1') AND (nume_gain_b014_mul_temp(61 DOWNTO 60) /= "11") ELSE
      nume_gain_b014_mul_temp(60 DOWNTO 15);

  s_nume_gain_b0_cast_9 <= resize(s_nume_gain_b0_9(45 DOWNTO 1), 46);

  s_nume_acc114_add_cast <= resize(s_nume_gain_b0_cast_9, 47);
  s_nume_acc114_add_cast_1 <= resize(s_nume_acc_cast1_14, 47);
  s_nume_acc114_add_temp <= s_nume_acc114_add_cast + s_nume_acc114_add_cast_1;
  
  s_nume_acc_out1_10 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc114_add_temp(46) = '0') AND (s_nume_acc114_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc114_add_temp(46) = '1') AND (s_nume_acc114_add_temp(45) /= '1') ELSE
      s_nume_acc114_add_temp(45 DOWNTO 0);

  V7 <= s_nume_acc_out1_10;

  -- CSD Encoding (24019198012643) : 010110001'01'0000110100001'0001000001'01'01001'00011; Cost (Adders) = 15
  Gain12_mul_temp <= ((((((((((((((resize(V7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V7 & '0' & '0' & '0' & '0' & '0', 92)) + resize(V7 & '0', 92)) + resize(V7, 92);
  
  I8_1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain12_mul_temp(91) = '0') AND (Gain12_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain12_mul_temp(91) = '1') AND (Gain12_mul_temp(90) /= '1') ELSE
      Gain12_mul_temp(90 DOWNTO 45);

  Sum6_stage2_add_cast <= resize(I8_1 & '0' & '0', 49);
  Sum6_stage2_add_cast_1 <= resize(Gain31_out1 & '0', 49);
  Sum6_stage2_add_temp <= Sum6_stage2_add_cast + Sum6_stage2_add_cast_1;
  Sum6_op_stage1 <= Sum6_stage2_add_temp(48 DOWNTO 1);

  Sum6_stage3_add_cast <= Sum6_op_stage1 & '0';
  Sum6_stage3_add_cast_1 <= resize(Sum6_stage3_add_cast, 50);
  Sum6_stage3_add_cast_2 <= resize(I8, 49);
  Sum6_stage3_add_cast_3 <= resize(Sum6_stage3_add_cast_2, 50);
  Sum6_stage3_add_temp <= Sum6_stage3_add_cast_1 + Sum6_stage3_add_cast_3;
  
  Sum6_stage3_cast <= "0111111111111111111111111111111111111111111111111" WHEN (Sum6_stage3_add_temp(49) = '0') AND (Sum6_stage3_add_temp(48) /= '0') ELSE
      "1000000000000000000000000000000000000000000000000" WHEN (Sum6_stage3_add_temp(49) = '1') AND (Sum6_stage3_add_temp(48) /= '1') ELSE
      Sum6_stage3_add_temp(48 DOWNTO 0);
  I8_2 <= Sum6_stage3_cast(48 DOWNTO 3);

  Delay_Mod6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay_Mod6_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay_Mod6_out1 <= I8_2;
      END IF;
    END IF;
  END PROCESS Delay_Mod6_process;


  s_input_acc_cast_10 <= resize(Delay_Mod6_out1(45 DOWNTO 8), 46);

  denom_acc115_sub_cast <= resize(s_input_acc_cast_10, 47);
  denom_acc115_sub_cast_1 <= resize(s_denom_gain1_11, 47);
  denom_acc115_sub_temp <= denom_acc115_sub_cast - denom_acc115_sub_cast_1;
  
  s_denom_acc_out1_11 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc115_sub_temp(46) = '0') AND (denom_acc115_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc115_sub_temp(46) = '1') AND (denom_acc115_sub_temp(45) /= '1') ELSE
      denom_acc115_sub_temp(45 DOWNTO 0);

  -- CSD Encoding (56803) : 1001'0001'0001'00011; Cost (Adders) = 5
  nume_gain_b015_mul_temp <= ((((resize(s_denom_acc_out1_11 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) - resize(s_denom_acc_out1_11 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_11 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_11 & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_denom_acc_out1_11 & '0', 63)) + resize(s_denom_acc_out1_11, 63);
  
  s_nume_gain_b0_10 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b015_mul_temp(62) = '0') AND (nume_gain_b015_mul_temp(61) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b015_mul_temp(62) = '1') AND (nume_gain_b015_mul_temp(61) /= '1') ELSE
      nume_gain_b015_mul_temp(61 DOWNTO 16);

  s_nume_gain_b0_cast_10 <= resize(s_nume_gain_b0_10(45 DOWNTO 1), 46);

  s_nume_acc115_add_cast <= resize(s_nume_gain_b0_cast_10, 47);
  s_nume_acc115_add_cast_1 <= resize(s_nume_acc_cast1_11, 47);
  s_nume_acc115_add_temp <= s_nume_acc115_add_cast + s_nume_acc115_add_cast_1;
  
  s_nume_acc_out1_11 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc115_add_temp(46) = '0') AND (s_nume_acc115_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc115_add_temp(46) = '1') AND (s_nume_acc115_add_temp(45) /= '1') ELSE
      s_nume_acc115_add_temp(45 DOWNTO 0);

  V8 <= s_nume_acc_out1_11;

  -- CSD Encoding (28823037615171) : 01101001001'001'001'000110001'01'01'001001'0001000011; Cost (Adders) = 16
  Gain32_mul_temp <= (((((((((((((((resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V8 & '0', 92)) + resize(V8, 92);
  
  Gain32_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain32_mul_temp(91) = '0') AND (Gain32_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain32_mul_temp(91) = '1') AND (Gain32_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain32_mul_temp(89 DOWNTO 44);

  Sum12_add_cast <= resize(Gain32_out1, 53);
  Sum12_add_cast_1 <= resize(I21 & '0' & '0' & '0' & '0' & '0' & '0', 53);
  Sum12_add_temp <= Sum12_add_cast + Sum12_add_cast_1;
  
  I21_1 <= "0111111111111111111111111111111111111111111111" WHEN (Sum12_add_temp(52) = '0') AND (Sum12_add_temp(51) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum12_add_temp(52) = '1') AND (Sum12_add_temp(51) /= '1') ELSE
      Sum12_add_temp(51 DOWNTO 6);

  s_input_acc_cast_11 <= resize(I21_1(45 DOWNTO 8), 46);

  denom_acc17_sub_cast <= resize(s_input_acc_cast_11, 47);
  denom_acc17_sub_cast_1 <= resize(s_denom_gain1_10, 47);
  denom_acc17_sub_temp <= denom_acc17_sub_cast - denom_acc17_sub_cast_1;
  
  s_denom_acc_out1_10 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc17_sub_temp(46) = '0') AND (denom_acc17_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc17_sub_temp(46) = '1') AND (denom_acc17_sub_temp(45) /= '1') ELSE
      denom_acc17_sub_temp(45 DOWNTO 0);

  -- CSD Encoding (91019) : 01011001001'0001011; Cost (Adders) = 7
  nume_gain_b07_mul_temp <= ((((((resize(s_denom_acc_out1_10 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) + resize(s_denom_acc_out1_10 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_denom_acc_out1_10 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_denom_acc_out1_10 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) - resize(s_denom_acc_out1_10 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(s_denom_acc_out1_10 & '0' & '0' & '0', 64)) + resize(s_denom_acc_out1_10 & '0', 64)) + resize(s_denom_acc_out1_10, 64);
  
  s_nume_gain_b0_11 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b07_mul_temp(63) = '0') AND (nume_gain_b07_mul_temp(62) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b07_mul_temp(63) = '1') AND (nume_gain_b07_mul_temp(62) /= '1') ELSE
      nume_gain_b07_mul_temp(62 DOWNTO 17);

  s_nume_gain_b0_cast_11 <= resize(s_nume_gain_b0_11(45 DOWNTO 1), 46);

  s_nume_acc17_add_cast <= resize(s_nume_gain_b0_cast_11, 47);
  s_nume_acc17_add_cast_1 <= resize(s_nume_acc_cast1_10, 47);
  s_nume_acc17_add_temp <= s_nume_acc17_add_cast + s_nume_acc17_add_cast_1;
  
  s_nume_acc_out1_9 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc17_add_temp(46) = '0') AND (s_nume_acc17_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc17_add_temp(46) = '1') AND (s_nume_acc17_add_temp(45) /= '1') ELSE
      s_nume_acc17_add_temp(45 DOWNTO 0);

  Difference10_out1_signed <= signed(Difference10_out1);

  -- CSD Encoding (25332747903959) : 011001'000010100100001'01'001'000010100100001'01'001'; Cost (Adders) = 14
  Gain65_mul_temp <= (((((((((((((resize(Difference10_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Difference10_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference10_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference10_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference10_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference10_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference10_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference10_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference10_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference10_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference10_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference10_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference10_out1_signed & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference10_out1_signed & '0' & '0' & '0', 92)) - resize(Difference10_out1_signed, 92);
  
  I22 <= "0111111111111111111111111111111111111111111111" WHEN (Gain65_mul_temp(91) = '0') AND (Gain65_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain65_mul_temp(91) = '1') AND (Gain65_mul_temp(90) /= '1') ELSE
      Gain65_mul_temp(90 DOWNTO 45);

  Sum11_add_cast <= resize(I22 & '0', 48);
  Sum11_add_cast_1 <= resize(Product_out1, 48);
  Sum11_add_temp <= Sum11_add_cast + Sum11_add_cast_1;
  
  I22_1 <= "0111111111111111111111111111111111111111111111" WHEN (Sum11_add_temp(47) = '0') AND (Sum11_add_temp(46) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum11_add_temp(47) = '1') AND (Sum11_add_temp(46) /= '1') ELSE
      Sum11_add_temp(46 DOWNTO 1);

  Delay_Mod8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay_Mod8_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay_Mod8_out1 <= I22_1;
      END IF;
    END IF;
  END PROCESS Delay_Mod8_process;


  V25_signed <= signed(V25);

  Product1_mul_temp <= Mult_delay3_out1 * V25_signed;
  
  Product1_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Product1_mul_temp(67) = '0') AND (Product1_mul_temp(66 DOWNTO 65) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Product1_mul_temp(67) = '1') AND (Product1_mul_temp(66 DOWNTO 65) /= "11") ELSE
      Product1_mul_temp(65 DOWNTO 20);

  Product5_mul_temp <= Mult_delay2_out1 * V24_signed;
  
  Product5_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Product5_mul_temp(67) = '0') AND (Product5_mul_temp(66) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Product5_mul_temp(67) = '1') AND (Product5_mul_temp(66) /= '1') ELSE
      Product5_mul_temp(66 DOWNTO 21);

  V25_signed_1 <= signed(V25_1);

  Product4_mul_temp <= Mult_delay2_out1 * V25_signed_1;
  
  Product4_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Product4_mul_temp(67) = '0') AND (Product4_mul_temp(66) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Product4_mul_temp(67) = '1') AND (Product4_mul_temp(66) /= '1') ELSE
      Product4_mul_temp(66 DOWNTO 21);

  V24_signed_1 <= signed(V24_1);

  Product2_mul_temp <= Mult_delay1_out1 * V24_signed_1;
  
  Product2_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Product2_mul_temp(67) = '0') AND (Product2_mul_temp(66 DOWNTO 65) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Product2_mul_temp(67) = '1') AND (Product2_mul_temp(66 DOWNTO 65) /= "11") ELSE
      Product2_mul_temp(65 DOWNTO 20);

  Sum18_add_cast <= resize(Product2_out1, 50);
  Sum18_add_cast_1 <= resize(Product4_out1 & '0' & '0' & '0', 50);
  Sum18_add_temp <= Sum18_add_cast + Sum18_add_cast_1;
  
  Sum18_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Sum18_add_temp(49) = '0') AND (Sum18_add_temp(48) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum18_add_temp(49) = '1') AND (Sum18_add_temp(48) /= '1') ELSE
      Sum18_add_temp(48 DOWNTO 3);

  Sum13_stage2_add_cast <= resize(Sum18_out1 & '0' & '0', 50);
  Sum13_stage2_add_cast_1 <= resize(Product1_out1, 50);
  Sum13_stage2_add_temp <= Sum13_stage2_add_cast + Sum13_stage2_add_cast_1;
  
  Sum13_op_stage1 <= "0111111111111111111111111111111111111111111111111" WHEN (Sum13_stage2_add_temp(49) = '0') AND (Sum13_stage2_add_temp(48) /= '0') ELSE
      "1000000000000000000000000000000000000000000000000" WHEN (Sum13_stage2_add_temp(49) = '1') AND (Sum13_stage2_add_temp(48) /= '1') ELSE
      Sum13_stage2_add_temp(48 DOWNTO 0);

  Sum13_stage3_add_cast <= resize(Sum13_op_stage1, 50);
  Sum13_stage3_add_cast_1 <= resize(Gain64_out1 & '0' & '0', 50);
  Sum13_stage3_add_temp <= Sum13_stage3_add_cast + Sum13_stage3_add_cast_1;
  
  I23 <= "0111111111111111111111111111111111111111111111" WHEN (Sum13_stage3_add_temp(49) = '0') AND (Sum13_stage3_add_temp(48 DOWNTO 47) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum13_stage3_add_temp(49) = '1') AND (Sum13_stage3_add_temp(48 DOWNTO 47) /= "11") ELSE
      Sum13_stage3_add_temp(47 DOWNTO 2);

  Delay_Mod9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay_Mod9_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay_Mod9_out1 <= I23;
      END IF;
    END IF;
  END PROCESS Delay_Mod9_process;


  V24_signed <= signed(V24);

  Product3_mul_temp <= Mult_delay1_out1 * V24_signed;
  
  Product3_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Product3_mul_temp(67) = '0') AND (Product3_mul_temp(66 DOWNTO 65) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Product3_mul_temp(67) = '1') AND (Product3_mul_temp(66 DOWNTO 65) /= "11") ELSE
      Product3_mul_temp(65 DOWNTO 20);

  Difference12_out1_signed <= signed(Difference12_out1);

  -- FCSD for 31665934879949 = 53 X 597470469433; Total Cost = 15
  -- CSD Encoding (53) : 0110101; Cost (Adders) = 3
  Gain67_factor <= ((resize(Difference12_out1_signed & '0' & '0' & '0' & '0' & '0', 92) + resize(Difference12_out1_signed & '0' & '0' & '0' & '0', 92)) + resize(Difference12_out1_signed & '0' & '0', 92)) + resize(Difference12_out1_signed, 92);
  -- CSD Encoding (597470469433) : 010001011001001'0000000100001'001'0101001'001; Cost (Adders) = 12
  Gain67_mul_temp <= (((((((((((resize(Gain67_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Gain67_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain67_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain67_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain67_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain67_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain67_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain67_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain67_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain67_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain67_factor & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain67_factor & '0' & '0' & '0', 92)) + Gain67_factor;
  
  I24 <= "0111111111111111111111111111111111111111111111" WHEN (Gain67_mul_temp(91) = '0') AND (Gain67_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain67_mul_temp(91) = '1') AND (Gain67_mul_temp(90) /= '1') ELSE
      Gain67_mul_temp(90 DOWNTO 45);

  Sum15_add_cast <= resize(I24 & '0' & '0' & '0', 50);
  Sum15_add_cast_1 <= resize(Product3_out1, 50);
  Sum15_add_temp <= Sum15_add_cast + Sum15_add_cast_1;
  
  I24_1 <= "0111111111111111111111111111111111111111111111" WHEN (Sum15_add_temp(49) = '0') AND (Sum15_add_temp(48) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum15_add_temp(49) = '1') AND (Sum15_add_temp(48) /= '1') ELSE
      Sum15_add_temp(48 DOWNTO 3);

  Difference13_out1_signed <= signed(Difference13_out1);

  -- FCSD for 31665934879949 = 53 X 597470469433; Total Cost = 15
  -- CSD Encoding (53) : 0110101; Cost (Adders) = 3
  Gain68_factor <= ((resize(Difference13_out1_signed & '0' & '0' & '0' & '0' & '0', 92) + resize(Difference13_out1_signed & '0' & '0' & '0' & '0', 92)) + resize(Difference13_out1_signed & '0' & '0', 92)) + resize(Difference13_out1_signed, 92);
  -- CSD Encoding (597470469433) : 010001011001001'0000000100001'001'0101001'001; Cost (Adders) = 12
  Gain68_mul_temp <= (((((((((((resize(Gain68_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Gain68_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain68_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain68_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain68_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain68_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain68_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain68_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain68_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain68_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Gain68_factor & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Gain68_factor & '0' & '0' & '0', 92)) + Gain68_factor;
  
  Gain68_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain68_mul_temp(91) = '0') AND (Gain68_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain68_mul_temp(91) = '1') AND (Gain68_mul_temp(90) /= '1') ELSE
      Gain68_mul_temp(90 DOWNTO 45);

  -- CSD Encoding (28823037615171) : 01101001001'001'001'000110001'01'01'001001'0001000011; Cost (Adders) = 16
  Gain25_mul_temp <= (((((((((((((((resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V26 & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V26 & '0', 92)) + resize(V26, 92);
  
  I27 <= "0111111111111111111111111111111111111111111111" WHEN (Gain25_mul_temp(91) = '0') AND (Gain25_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain25_mul_temp(91) = '1') AND (Gain25_mul_temp(90) /= '1') ELSE
      Gain25_mul_temp(90 DOWNTO 45);

  Sum10_add_cast <= resize(I27, 53);
  Sum10_add_cast_1 <= resize(Gain68_out1 & '0' & '0' & '0' & '0' & '0' & '0', 53);
  Sum10_add_temp <= Sum10_add_cast + Sum10_add_cast_1;
  
  I27_1 <= "0111111111111111111111111111111111111111111111" WHEN (Sum10_add_temp(52) = '0') AND (Sum10_add_temp(51) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum10_add_temp(52) = '1') AND (Sum10_add_temp(51) /= '1') ELSE
      Sum10_add_temp(51 DOWNTO 6);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay2_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay2_out1 <= I27_1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  s_input_acc_cast_12 <= resize(Delay2_out1(45 DOWNTO 11), 46);

  denom_acc19_sub_cast <= resize(s_input_acc_cast_12, 47);
  denom_acc19_sub_cast_1 <= resize(s_denom_gain1_3, 47);
  denom_acc19_sub_temp <= denom_acc19_sub_cast - denom_acc19_sub_cast_1;
  
  s_denom_acc_out1_3 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc19_sub_temp(46) = '0') AND (denom_acc19_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc19_sub_temp(46) = '1') AND (denom_acc19_sub_temp(45) /= '1') ELSE
      denom_acc19_sub_temp(45 DOWNTO 0);

  -- CSD Encoding (36409) : 01001001'001001'001; Cost (Adders) = 5
  nume_gain_b09_mul_temp <= ((((resize(s_denom_acc_out1_3 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63) + resize(s_denom_acc_out1_3 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_3 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 63)) + resize(s_denom_acc_out1_3 & '0' & '0' & '0' & '0' & '0' & '0', 63)) - resize(s_denom_acc_out1_3 & '0' & '0' & '0', 63)) + resize(s_denom_acc_out1_3, 63);
  
  s_nume_gain_b0_12 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b09_mul_temp(62) = '0') AND (nume_gain_b09_mul_temp(61 DOWNTO 60) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b09_mul_temp(62) = '1') AND (nume_gain_b09_mul_temp(61 DOWNTO 60) /= "11") ELSE
      nume_gain_b09_mul_temp(60 DOWNTO 15);

  s_nume_gain_b0_cast_12 <= resize(s_nume_gain_b0_12(45 DOWNTO 1), 46);

  s_nume_acc19_add_cast <= resize(s_nume_gain_b0_cast_12, 47);
  s_nume_acc19_add_cast_1 <= resize(s_nume_acc_cast1_3, 47);
  s_nume_acc19_add_temp <= s_nume_acc19_add_cast + s_nume_acc19_add_cast_1;
  
  s_nume_acc_out1_12 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc19_add_temp(46) = '0') AND (s_nume_acc19_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc19_add_temp(46) = '1') AND (s_nume_acc19_add_temp(45) /= '1') ELSE
      s_nume_acc19_add_temp(45 DOWNTO 0);

  V27 <= s_nume_acc_out1_12;

  -- CSD Encoding (28823037615171) : 01101001001'001'001'000110001'01'01'001001'0001000011; Cost (Adders) = 16
  Gain26_mul_temp <= (((((((((((((((resize(V27 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V27 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V27 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V27 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V27 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V27 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V27 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V27 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V27 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V27 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V27 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V27 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V27 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V27 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V27 & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V27 & '0', 92)) + resize(V27, 92);
  
  I26 <= "0111111111111111111111111111111111111111111111" WHEN (Gain26_mul_temp(91) = '0') AND (Gain26_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain26_mul_temp(91) = '1') AND (Gain26_mul_temp(90) /= '1') ELSE
      Gain26_mul_temp(90 DOWNTO 45);

  -- CSD Encoding (28823037615171) : 01101001001'001'001'000110001'01'01'001001'0001000011; Cost (Adders) = 16
  Gain23_mul_temp <= (((((((((((((((resize(V4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V4 & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V4 & '0', 92)) + resize(V4, 92);
  
  I26_1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain23_mul_temp(91) = '0') AND (Gain23_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain23_mul_temp(91) = '1') AND (Gain23_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain23_mul_temp(89 DOWNTO 44);

  Sum3_add_cast <= resize(I26_1, 55);
  Sum3_add_cast_1 <= resize(I26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 55);
  Sum3_add_temp <= Sum3_add_cast + Sum3_add_cast_1;
  
  alpha26 <= "0111111111111111111111111111111111111111111111" WHEN (Sum3_add_temp(54) = '0') AND (Sum3_add_temp(53) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum3_add_temp(54) = '1') AND (Sum3_add_temp(53) /= '1') ELSE
      Sum3_add_temp(53 DOWNTO 8);

  s_input_acc_cast_13 <= resize(alpha26(45 DOWNTO 2), 46);

  denom_acc18_sub_cast <= resize(s_input_acc_cast_13, 47);
  denom_acc18_sub_cast_1 <= resize(s_denom_acc_cast1, 47);
  denom_acc18_sub_temp <= denom_acc18_sub_cast - denom_acc18_sub_cast_1;
  
  s_denom_acc_out1_2 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc18_sub_temp(46) = '0') AND (denom_acc18_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc18_sub_temp(46) = '1') AND (denom_acc18_sub_temp(45) /= '1') ELSE
      denom_acc18_sub_temp(45 DOWNTO 0);

  -- FCSD for 2439 = 9 X 271; Total Cost = 3
  -- CSD Encoding (9) : 01001; Cost (Adders) = 1
  nume_gain_b08_factor <= resize(s_denom_acc_out1_2 & '0' & '0' & '0', 59) + resize(s_denom_acc_out1_2, 59);
  -- CSD Encoding (271) : 0100010001'; Cost (Adders) = 2
  nume_gain_b08_mul_temp <= (resize(nume_gain_b08_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 59) + resize(nume_gain_b08_factor & '0' & '0' & '0' & '0', 59)) - nume_gain_b08_factor;
  
  s_nume_gain_b0_13 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b08_mul_temp(58) = '0') AND (nume_gain_b08_mul_temp(57 DOWNTO 56) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b08_mul_temp(58) = '1') AND (nume_gain_b08_mul_temp(57 DOWNTO 56) /= "11") ELSE
      nume_gain_b08_mul_temp(56 DOWNTO 11);

  s_nume_gain_b0_cast_13 <= resize(s_nume_gain_b0_13(45 DOWNTO 1), 46);

  s_nume_acc18_add_cast <= resize(s_nume_gain_b0_cast_13, 47);
  s_nume_acc18_add_cast_1 <= resize(s_nume_acc_cast1_2, 47);
  s_nume_acc18_add_temp <= s_nume_acc18_add_cast + s_nume_acc18_add_cast_1;
  
  s_nume_acc_out1_13 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc18_add_temp(46) = '0') AND (s_nume_acc18_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc18_add_temp(46) = '1') AND (s_nume_acc18_add_temp(45) /= '1') ELSE
      s_nume_acc18_add_temp(45 DOWNTO 0);

  V26 <= s_nume_acc_out1_13;

  -- CSD Encoding (28823037615171) : 01101001001'001'001'000110001'01'01'001001'0001000011; Cost (Adders) = 16
  Gain24_mul_temp <= (((((((((((((((resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V26 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V26 & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V26 & '0', 92)) + resize(V26, 92);
  
  I4_1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain24_mul_temp(91) = '0') AND (Gain24_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain24_mul_temp(91) = '1') AND (Gain24_mul_temp(90) /= '1') ELSE
      Gain24_mul_temp(90 DOWNTO 45);

  -- CSD Encoding (24019198012643) : 010110001'01'0000110100001'0001000001'01'01001'00011; Cost (Adders) = 15
  Gain8_mul_temp <= ((((((((((((((resize(V5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(V5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(V5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(V5 & '0' & '0' & '0' & '0' & '0', 92)) + resize(V5 & '0', 92)) + resize(V5, 92);
  
  I2_2 <= "0111111111111111111111111111111111111111111111" WHEN (Gain8_mul_temp(91) = '0') AND (Gain8_mul_temp(90 DOWNTO 89) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain8_mul_temp(91) = '1') AND (Gain8_mul_temp(90 DOWNTO 89) /= "11") ELSE
      Gain8_mul_temp(89 DOWNTO 44);

  Difference1_out1_signed <= signed(Difference1_out1);

  -- CSD Encoding (25940733853654) : 0110001'001100001'00110001001'01000000000001'01'01'0; Cost (Adders) = 13
  Gain10_mul_temp <= ((((((((((((resize(Difference1_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92) + resize(Difference1_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference1_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference1_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference1_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference1_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference1_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference1_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference1_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference1_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) + resize(Difference1_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference1_out1_signed & '0' & '0' & '0' & '0' & '0', 92)) - resize(Difference1_out1_signed & '0' & '0' & '0', 92)) - resize(Difference1_out1_signed & '0', 92);
  
  I1_2 <= "0111111111111111111111111111111111111111111111" WHEN (Gain10_mul_temp(91) = '0') AND (Gain10_mul_temp(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain10_mul_temp(91) = '1') AND (Gain10_mul_temp(90) /= '1') ELSE
      Gain10_mul_temp(90 DOWNTO 45);

  Sum2_add_cast <= resize(I1_2, 49);
  Sum2_add_cast_1 <= resize(I2_2 & '0' & '0', 49);
  Sum2_add_temp <= Sum2_add_cast + Sum2_add_cast_1;
  
  Sum2_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Sum2_add_temp(48) = '0') AND (Sum2_add_temp(47) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum2_add_temp(48) = '1') AND (Sum2_add_temp(47) /= '1') ELSE
      Sum2_add_temp(47 DOWNTO 2);

  Sum9_stage2_add_cast <= resize(Sum2_out1 & '0', 49);
  Sum9_stage2_add_cast_1 <= resize(I4, 49);
  Sum9_stage2_add_temp <= Sum9_stage2_add_cast + Sum9_stage2_add_cast_1;
  
  Sum9_op_stage1 <= X"7FFFFFFFFFFF" WHEN (Sum9_stage2_add_temp(48) = '0') AND (Sum9_stage2_add_temp(47) /= '0') ELSE
      X"800000000000" WHEN (Sum9_stage2_add_temp(48) = '1') AND (Sum9_stage2_add_temp(47) /= '1') ELSE
      Sum9_stage2_add_temp(47 DOWNTO 0);

  Sum9_stage3_add_cast <= resize(Sum9_op_stage1, 49);
  Sum9_stage3_add_cast_1 <= resize(I4_1 & '0', 49);
  Sum9_stage3_add_temp <= Sum9_stage3_add_cast + Sum9_stage3_add_cast_1;
  
  I4_2 <= "0111111111111111111111111111111111111111111111" WHEN (Sum9_stage3_add_temp(48) = '0') AND (Sum9_stage3_add_temp(47 DOWNTO 42) /= "000000") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum9_stage3_add_temp(48) = '1') AND (Sum9_stage3_add_temp(47 DOWNTO 42) /= "111111") ELSE
      Sum9_stage3_add_temp(42 DOWNTO 0) & '0' & '0' & '0';

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay1_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay1_out1 <= I4_2;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  s_input_acc_cast_14 <= resize(Delay1_out1(45 DOWNTO 4), 46);

  denom_acc113_sub_cast <= resize(s_input_acc_cast_14, 47);
  denom_acc113_sub_cast_1 <= resize(s_denom_gain1_1, 47);
  denom_acc113_sub_temp <= denom_acc113_sub_cast - denom_acc113_sub_cast_1;
  
  s_denom_acc_out1_1 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc113_sub_temp(46) = '0') AND (denom_acc113_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc113_sub_temp(46) = '1') AND (denom_acc113_sub_temp(45) /= '1') ELSE
      denom_acc113_sub_temp(45 DOWNTO 0);

  -- CSD Encoding (31863) : 100001'0010001'001'; Cost (Adders) = 4
  nume_gain_b013_mul_temp <= (((resize(s_denom_acc_out1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62) - resize(s_denom_acc_out1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) + resize(s_denom_acc_out1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62)) - resize(s_denom_acc_out1_1 & '0' & '0' & '0', 62)) - resize(s_denom_acc_out1_1, 62);
  
  s_nume_gain_b0_14 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b013_mul_temp(61) = '0') AND (nume_gain_b013_mul_temp(60) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b013_mul_temp(61) = '1') AND (nume_gain_b013_mul_temp(60) /= '1') ELSE
      nume_gain_b013_mul_temp(60 DOWNTO 15);

  s_nume_gain_b0_cast_14 <= resize(s_nume_gain_b0_14(45 DOWNTO 1), 46);

  s_nume_acc113_add_cast <= resize(s_nume_gain_b0_cast_14, 47);
  s_nume_acc113_add_cast_1 <= resize(s_nume_acc_cast1_1, 47);
  s_nume_acc113_add_temp <= s_nume_acc113_add_cast + s_nume_acc113_add_cast_1;
  
  s_nume_acc_out1_14 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc113_add_temp(46) = '0') AND (s_nume_acc113_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc113_add_temp(46) = '1') AND (s_nume_acc113_add_temp(45) /= '1') ELSE
      s_nume_acc113_add_temp(45 DOWNTO 0);

  V4 <= s_nume_acc_out1_14;

  Gain7_cast <= resize(V4, 47);
  Gain7_cast_1 <=  - (Gain7_cast);
  Gain7_cast_2 <= Gain7_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  
  Gain7_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Gain7_cast_2(91) = '0') AND (Gain7_cast_2(90) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Gain7_cast_2(91) = '1') AND (Gain7_cast_2(90) /= '1') ELSE
      Gain7_cast_2(90 DOWNTO 45);

  Discrete_Time_Integrator2_indtc <= Gain7_out1;

  gain1_mul_temp <= signed'("0000010100111100011010011011000110001110001101") * Discrete_Time_Integrator2_indtc;
  Discrete_Time_Integrator2_u_gain <= resize(gain1_mul_temp(91 DOWNTO 47), 46);

  Discrete_Time_Integrator2_u_dtc <= Discrete_Time_Integrator2_u_gain;

  adder3_add_cast <= resize(V5, 47);
  adder3_add_cast_1 <= resize(Discrete_Time_Integrator2_u_dtc, 47);
  adder3_add_temp <= adder3_add_cast + adder3_add_cast_1;
  
  Discrete_Time_Integrator2_y_add <= "0111111111111111111111111111111111111111111111" WHEN (adder3_add_temp(46) = '0') AND (adder3_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (adder3_add_temp(46) = '1') AND (adder3_add_temp(45) /= '1') ELSE
      adder3_add_temp(45 DOWNTO 0);

  
  Discrete_Time_Integrator2_y_sat <= signed'("0010010000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator2_y_add > signed'("0010010000000000000000000000000000000000000000") ELSE
      signed'("1101110000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator2_y_add < signed'("1101110000000000000000000000000000000000000000") ELSE
      Discrete_Time_Integrator2_y_add;

  Discrete_Time_Integrator2_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Discrete_Time_Integrator2_x_reg <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Discrete_Time_Integrator2_x_reg <= Discrete_Time_Integrator2_y_sat;
      END IF;
    END IF;
  END PROCESS Discrete_Time_Integrator2_reg_process;


  adder2_add_cast <= resize(Discrete_Time_Integrator2_x_reg, 47);
  adder2_add_cast_1 <= resize(Discrete_Time_Integrator2_u_dtc, 47);
  adder2_add_temp <= adder2_add_cast + adder2_add_cast_1;
  
  Discrete_Time_Integrator2_x_add <= "0111111111111111111111111111111111111111111111" WHEN (adder2_add_temp(46) = '0') AND (adder2_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (adder2_add_temp(46) = '1') AND (adder2_add_temp(45) /= '1') ELSE
      adder2_add_temp(45 DOWNTO 0);

  
  V5 <= signed'("0010010000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator2_x_add > signed'("0010010000000000000000000000000000000000000000") ELSE
      signed'("1101110000000000000000000000000000000000000000") WHEN Discrete_Time_Integrator2_x_add < signed'("1101110000000000000000000000000000000000000000") ELSE
      Discrete_Time_Integrator2_x_add;

  Path_Delay_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Path_Delay_2_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Path_Delay_2_out1 <= V5;
      END IF;
    END IF;
  END PROCESS Path_Delay_2_process;


  s_input_acc_cast_15 <= resize(Path_Delay_2_out1(45 DOWNTO 18), 46);

  s_state_out11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      s_state_out1_16 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        s_state_out1_16 <= s_denom_acc_out1_15;
      END IF;
    END IF;
  END PROCESS s_state_out11_process;


  -- CSD Encoding (2097149) : 10000000000000000001'01; Cost (Adders) = 2
  denom_gain11_mul_temp <=  - ((resize(s_state_out1_16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 69) - resize(s_state_out1_16 & '0' & '0', 69)) + resize(s_state_out1_16, 69));
  
  s_denom_gain1_15 <= "0111111111111111111111111111111111111111111111" WHEN (denom_gain11_mul_temp(68) = '0') AND (denom_gain11_mul_temp(67 DOWNTO 66) /= "00") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_gain11_mul_temp(68) = '1') AND (denom_gain11_mul_temp(67 DOWNTO 66) /= "11") ELSE
      denom_gain11_mul_temp(66 DOWNTO 21);

  denom_acc11_sub_cast <= resize(s_input_acc_cast_15, 47);
  denom_acc11_sub_cast_1 <= resize(s_denom_gain1_15, 47);
  denom_acc11_sub_temp <= denom_acc11_sub_cast - denom_acc11_sub_cast_1;
  
  s_denom_acc_out1_15 <= "0111111111111111111111111111111111111111111111" WHEN (denom_acc11_sub_temp(46) = '0') AND (denom_acc11_sub_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (denom_acc11_sub_temp(46) = '1') AND (denom_acc11_sub_temp(45) /= '1') ELSE
      denom_acc11_sub_temp(45 DOWNTO 0);

  -- CSD Encoding (521835) : 100000001'01'01001'01'01'; Cost (Adders) = 6
  nume_gain_b01_mul_temp <= (((((resize(s_denom_acc_out1_15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 66) - resize(s_denom_acc_out1_15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 66)) - resize(s_denom_acc_out1_15 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 66)) + resize(s_denom_acc_out1_15 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 66)) - resize(s_denom_acc_out1_15 & '0' & '0' & '0' & '0', 66)) - resize(s_denom_acc_out1_15 & '0' & '0', 66)) - resize(s_denom_acc_out1_15, 66);
  
  s_nume_gain_b0_15 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain_b01_mul_temp(65) = '0') AND (nume_gain_b01_mul_temp(64) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain_b01_mul_temp(65) = '1') AND (nume_gain_b01_mul_temp(64) /= '1') ELSE
      nume_gain_b01_mul_temp(64 DOWNTO 19);

  -- CSD Encoding (521835) : 100000001'01'01001'01'01'; Cost (Adders) = 6
  nume_gain11_mul_temp <=  - ((((((resize(s_state_out1_16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 66) - resize(s_state_out1_16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 66)) - resize(s_state_out1_16 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 66)) + resize(s_state_out1_16 & '0' & '0' & '0' & '0' & '0' & '0' & '0', 66)) - resize(s_state_out1_16 & '0' & '0' & '0' & '0', 66)) - resize(s_state_out1_16 & '0' & '0', 66)) - resize(s_state_out1_16, 66));
  
  s_nume_gain1_15 <= "0111111111111111111111111111111111111111111111" WHEN (nume_gain11_mul_temp(65) = '0') AND (nume_gain11_mul_temp(64) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (nume_gain11_mul_temp(65) = '1') AND (nume_gain11_mul_temp(64) /= '1') ELSE
      nume_gain11_mul_temp(64 DOWNTO 19);

  s_nume_acc11_add_cast <= resize(s_nume_gain_b0_15, 47);
  s_nume_acc11_add_cast_1 <= resize(s_nume_gain1_15, 47);
  s_nume_acc11_add_temp <= s_nume_acc11_add_cast + s_nume_acc11_add_cast_1;
  
  s_nume_acc_out1_15 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc11_add_temp(46) = '0') AND (s_nume_acc11_add_temp(45) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc11_add_temp(46) = '1') AND (s_nume_acc11_add_temp(45) /= '1') ELSE
      s_nume_acc11_add_temp(45 DOWNTO 0);

  
  s_output_cast_1 <= "0111111111111111111111111111111111111111111111" WHEN (s_nume_acc_out1_15(45) = '0') AND (s_nume_acc_out1_15(44 DOWNTO 27) /= "000000000000000000") ELSE
      "1000000000000000000000000000000000000000000000" WHEN (s_nume_acc_out1_15(45) = '1') AND (s_nume_acc_out1_15(44 DOWNTO 27) /= "111111111111111111") ELSE
      s_nume_acc_out1_15(27 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  Rate_Transition1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Rate_Transition1_bypass_reg <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb_1_150_1 = '1' THEN
        Rate_Transition1_bypass_reg <= s_output_cast_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition1_bypass_process;

  
  Rate_Transition1_out1 <= s_output_cast_1 WHEN enb_1_150_1 = '1' ELSE
      Rate_Transition1_bypass_reg;

  
  Data_Type_Conversion1_out1 <= X"7FFF" WHEN (Rate_Transition1_out1(45) = '0') AND (Rate_Transition1_out1(44 DOWNTO 41) /= "0000") ELSE
      X"8000" WHEN (Rate_Transition1_out1(45) = '1') AND (Rate_Transition1_out1(44 DOWNTO 41) /= "1111") ELSE
      Rate_Transition1_out1(41 DOWNTO 26);

  Vout <= std_logic_vector(Data_Type_Conversion1_out1);

  ce_out <= enb_1_150_1;

END rtl;

