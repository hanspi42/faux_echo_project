-- -------------------------------------------------------------
-- 
-- File Name: E:\Users\Donut\Dokumente\FHNW\7. Semester\pro7E\Matlab\2021a\hdl_coder\Der_Faux_FPGA_ovs150_WL46\Shift_register.vhd
-- Created: 2020-12-24 12:43:09
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Shift_register
-- Source Path: Der_Faux_FPGA_ovs150_WL46/Der_Faux_FPGA/Comparator Logic/Shift_register
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Shift_register IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enable                            :   IN    std_logic;
        data_in                           :   IN    std_logic;
        data_out                          :   OUT   std_logic
        );
END Shift_register;


ARCHITECTURE rtl OF Shift_register IS

  -- Component Declarations
  COMPONENT SimpleDualPortRAM_singlebit
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic;
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SimpleDualPortRAM_singlebit
    USE ENTITY work.SimpleDualPortRAM_singlebit(rtl);

  -- Signals
  SIGNAL Write_Pointer_Counter1_out1      : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Constant11_out1                  : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Pointer_sum1_sub_cast            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL Pointer_sum1_sub_cast_1          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL Pointer_sum1_sub_temp            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL Pointer_sum1_out1                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL buffer_rsvd                      : std_logic;

BEGIN
  u_dual_port_RAM1 : SimpleDualPortRAM_singlebit
    GENERIC MAP( AddrWidth => 18,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => data_in,
              wr_addr => std_logic_vector(Write_Pointer_Counter1_out1),
              wr_en => enable,
              rd_addr => std_logic_vector(Pointer_sum1_out1),
              rd_dout => buffer_rsvd
              );

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 262143
  Write_Pointer_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Write_Pointer_Counter1_out1 <= to_unsigned(16#00000#, 18);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' AND enable = '1' THEN
        Write_Pointer_Counter1_out1 <= Write_Pointer_Counter1_out1 + to_unsigned(16#00001#, 18);
      END IF;
    END IF;
  END PROCESS Write_Pointer_Counter1_process;


  Constant11_out1 <= to_unsigned(16#2AF80#, 18);

  Pointer_sum1_sub_cast <= signed(resize(Write_Pointer_Counter1_out1, 19));
  Pointer_sum1_sub_cast_1 <= signed(resize(Constant11_out1, 19));
  Pointer_sum1_sub_temp <= Pointer_sum1_sub_cast - Pointer_sum1_sub_cast_1;
  Pointer_sum1_out1 <= unsigned(Pointer_sum1_sub_temp(17 DOWNTO 0));

  data_out <= buffer_rsvd;

END rtl;

