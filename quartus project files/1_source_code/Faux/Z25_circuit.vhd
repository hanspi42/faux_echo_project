-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Der_Faux_FPGA_V2_optimized\Z25_circuit.vhd
-- Created: 2022-04-19 09:51:10
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Z25_circuit
-- Source Path: Der_Faux_FPGA_V2_optimized/Der_Faux_FPGA/Z25_circuit
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Der_Faux_FPGA_pkg.ALL;

ENTITY Z25_circuit IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Gvar2_N                           :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        Z25_in                            :   IN    std_logic_vector(45 DOWNTO 0);  -- sfix46_En51
        Z25_out                           :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En42
        );
END Z25_circuit;


ARCHITECTURE rtl OF Z25_circuit IS

  -- Constants
  CONSTANT LUT_Z25a_data                  : vector_of_signed21(0 TO 31) := 
    (to_signed(16#0992AE#, 21), to_signed(16#0992AB#, 21), to_signed(16#0992A8#, 21), to_signed(16#0992A6#, 21),
     to_signed(16#0992A2#, 21), to_signed(16#09929F#, 21), to_signed(16#09929C#, 21), to_signed(16#099298#, 21),
     to_signed(16#099294#, 21), to_signed(16#09928F#, 21), to_signed(16#09928A#, 21), to_signed(16#099285#, 21),
     to_signed(16#09927F#, 21), to_signed(16#099279#, 21), to_signed(16#099271#, 21), to_signed(16#099269#, 21),
     to_signed(16#099260#, 21), to_signed(16#099256#, 21), to_signed(16#09924A#, 21), to_signed(16#09923C#, 21),
     to_signed(16#09922D#, 21), to_signed(16#09921A#, 21), to_signed(16#099203#, 21), to_signed(16#0991E8#, 21),
     to_signed(16#0991C5#, 21), to_signed(16#099199#, 21), to_signed(16#09915E#, 21), to_signed(16#09910C#, 21),
     to_signed(16#099090#, 21), to_signed(16#098FC2#, 21), to_signed(16#098E26#, 21), to_signed(16#098957#, 21));  -- sfix21 [32]
  CONSTANT LUT_Z25b_data                  : vector_of_signed20(0 TO 31) := 
    (to_signed(-16#7FF7F#, 20), to_signed(-16#7FF7A#, 20), to_signed(-16#7FF76#, 20), to_signed(-16#7FF71#, 20),
     to_signed(-16#7FF6C#, 20), to_signed(-16#7FF67#, 20), to_signed(-16#7FF61#, 20), to_signed(-16#7FF5A#, 20),
     to_signed(-16#7FF53#, 20), to_signed(-16#7FF4C#, 20), to_signed(-16#7FF44#, 20), to_signed(-16#7FF3B#, 20),
     to_signed(-16#7FF31#, 20), to_signed(-16#7FF26#, 20), to_signed(-16#7FF1A#, 20), to_signed(-16#7FF0C#, 20),
     to_signed(-16#7FEFD#, 20), to_signed(-16#7FEEC#, 20), to_signed(-16#7FED8#, 20), to_signed(-16#7FEC2#, 20),
     to_signed(-16#7FEA7#, 20), to_signed(-16#7FE88#, 20), to_signed(-16#7FE62#, 20), to_signed(-16#7FE34#, 20),
     to_signed(-16#7FDFB#, 20), to_signed(-16#7FDB1#, 20), to_signed(-16#7FD4E#, 20), to_signed(-16#7FCC4#, 20),
     to_signed(-16#7FBF6#, 20), to_signed(-16#7FA9D#, 20), to_signed(-16#7F7ED#, 20), to_signed(-16#7EFE3#, 20));  -- sfix20 [32]

  -- Signals
  SIGNAL Gvar2_N_unsigned                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL LUT_Z25a_k                       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL LUT_Z25a_out1                    : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Mult_delay2_out1                 : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Z25_in_signed                    : signed(45 DOWNTO 0);  -- sfix46_En51
  SIGNAL Product6_mul_temp                : signed(66 DOWNTO 0);  -- sfix67_En70
  SIGNAL Product6_out1                    : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL LUT_Z25b_k                       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL LUT_Z25b_out1                    : signed(19 DOWNTO 0);  -- sfix20_En19
  SIGNAL Mult_delay1_out1                 : signed(19 DOWNTO 0);  -- sfix20_En19
  SIGNAL Delay_Mod10_out1                 : signed(45 DOWNTO 0);  -- sfix46_En51
  SIGNAL Product7_mul_temp                : signed(66 DOWNTO 0);  -- sfix67_En70
  SIGNAL Product7_out1                    : signed(45 DOWNTO 0);  -- sfix46_En50
  SIGNAL Sum4_out1                        : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Delay_Mod11_out1                 : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Product8_mul_temp                : signed(65 DOWNTO 0);  -- sfix66_En61
  SIGNAL Product8_out1                    : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Sum4_stage2_sub_cast             : signed(54 DOWNTO 0);  -- sfix55_En50
  SIGNAL Sum4_stage2_sub_cast_1           : signed(54 DOWNTO 0);  -- sfix55_En50
  SIGNAL Sum4_op_stage2                   : signed(54 DOWNTO 0);  -- sfix55_En50
  SIGNAL Sum4_stage3_add_cast             : signed(55 DOWNTO 0);  -- sfix56_En50
  SIGNAL Sum4_stage3_add_cast_1           : signed(54 DOWNTO 0);  -- sfix55_En50
  SIGNAL Sum4_stage3_add_cast_2           : signed(55 DOWNTO 0);  -- sfix56_En50
  SIGNAL Sum4_stage3_add_temp             : signed(55 DOWNTO 0);  -- sfix56_En50
  SIGNAL Sum4_stage3_cast                 : signed(54 DOWNTO 0);  -- sfix55_En50

BEGIN
  Gvar2_N_unsigned <= unsigned(Gvar2_N);

  
  LUT_Z25a_k <= to_unsigned(16#00#, 5) WHEN Gvar2_N_unsigned = to_unsigned(16#00#, 5) ELSE
      to_unsigned(16#1F#, 5) WHEN Gvar2_N_unsigned = to_unsigned(16#1F#, 5) ELSE
      Gvar2_N_unsigned;
  LUT_Z25a_out1 <= LUT_Z25a_data(to_integer(LUT_Z25a_k));

  Mult_delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Mult_delay2_out1 <= to_signed(16#000000#, 21);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Mult_delay2_out1 <= LUT_Z25a_out1;
      END IF;
    END IF;
  END PROCESS Mult_delay2_process;


  Z25_in_signed <= signed(Z25_in);

  Product6_mul_temp <= Mult_delay2_out1 * Z25_in_signed;
  
  Product6_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Product6_mul_temp(66) = '0') AND (Product6_mul_temp(65) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Product6_mul_temp(66) = '1') AND (Product6_mul_temp(65) /= '1') ELSE
      Product6_mul_temp(65 DOWNTO 20);

  
  LUT_Z25b_k <= to_unsigned(16#00#, 5) WHEN Gvar2_N_unsigned = to_unsigned(16#00#, 5) ELSE
      to_unsigned(16#1F#, 5) WHEN Gvar2_N_unsigned = to_unsigned(16#1F#, 5) ELSE
      Gvar2_N_unsigned;
  LUT_Z25b_out1 <= LUT_Z25b_data(to_integer(LUT_Z25b_k));

  Mult_delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Mult_delay1_out1 <= to_signed(16#00000#, 20);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Mult_delay1_out1 <= LUT_Z25b_out1;
      END IF;
    END IF;
  END PROCESS Mult_delay1_process;


  Delay_Mod10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay_Mod10_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay_Mod10_out1 <= Z25_in_signed;
      END IF;
    END IF;
  END PROCESS Delay_Mod10_process;


  Product7_mul_temp <= Delay_Mod10_out1 * Mult_delay2_out1;
  
  Product7_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Product7_mul_temp(66) = '0') AND (Product7_mul_temp(65) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Product7_mul_temp(66) = '1') AND (Product7_mul_temp(65) /= '1') ELSE
      Product7_mul_temp(65 DOWNTO 20);

  Delay_Mod11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay_Mod11_out1 <= to_signed(0, 46);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay_Mod11_out1 <= Sum4_out1;
      END IF;
    END IF;
  END PROCESS Delay_Mod11_process;


  Product8_mul_temp <= Mult_delay1_out1 * Delay_Mod11_out1;
  
  Product8_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Product8_mul_temp(65) = '0') AND (Product8_mul_temp(64) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Product8_mul_temp(65) = '1') AND (Product8_mul_temp(64) /= '1') ELSE
      Product8_mul_temp(64 DOWNTO 19);

  Sum4_stage2_sub_cast <= resize(Product6_out1, 55);
  Sum4_stage2_sub_cast_1 <= resize(Product8_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 55);
  Sum4_op_stage2 <= Sum4_stage2_sub_cast - Sum4_stage2_sub_cast_1;

  Sum4_stage3_add_cast <= resize(Sum4_op_stage2, 56);
  Sum4_stage3_add_cast_1 <= resize(Product7_out1, 55);
  Sum4_stage3_add_cast_2 <= resize(Sum4_stage3_add_cast_1, 56);
  Sum4_stage3_add_temp <= Sum4_stage3_add_cast + Sum4_stage3_add_cast_2;
  
  Sum4_stage3_cast <= "0111111111111111111111111111111111111111111111111111111" WHEN (Sum4_stage3_add_temp(55) = '0') AND (Sum4_stage3_add_temp(54) /= '0') ELSE
      "1000000000000000000000000000000000000000000000000000000" WHEN (Sum4_stage3_add_temp(55) = '1') AND (Sum4_stage3_add_temp(54) /= '1') ELSE
      Sum4_stage3_add_temp(54 DOWNTO 0);
  
  Sum4_out1 <= "0111111111111111111111111111111111111111111111" WHEN (Sum4_stage3_cast(54) = '0') AND (Sum4_stage3_cast(53) /= '0') ELSE
      "1000000000000000000000000000000000000000000000" WHEN (Sum4_stage3_cast(54) = '1') AND (Sum4_stage3_cast(53) /= '1') ELSE
      Sum4_stage3_cast(53 DOWNTO 8);

  Z25_out <= std_logic_vector(Sum4_out1);

END rtl;

